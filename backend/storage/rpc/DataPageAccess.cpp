/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "DataPageAccess.h"

namespace tutorial {


DataPageAccess_ReadBufferCommon_args::~DataPageAccess_ReadBufferCommon_args() noexcept {
}


uint32_t DataPageAccess_ReadBufferCommon_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_reln.read(iprot);
          this->__isset._reln = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_relpersistence);
          this->__isset._relpersistence = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_forknum);
          this->__isset._forknum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_blknum);
          this->__isset._blknum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_readBufferMode);
          this->__isset._readBufferMode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_lsn);
          this->__isset._lsn = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DataPageAccess_ReadBufferCommon_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DataPageAccess_ReadBufferCommon_args");

  xfer += oprot->writeFieldBegin("_reln", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_reln.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_relpersistence", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->_relpersistence);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_forknum", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->_forknum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_blknum", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->_blknum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_readBufferMode", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->_readBufferMode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_lsn", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->_lsn);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


DataPageAccess_ReadBufferCommon_pargs::~DataPageAccess_ReadBufferCommon_pargs() noexcept {
}


uint32_t DataPageAccess_ReadBufferCommon_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DataPageAccess_ReadBufferCommon_pargs");

  xfer += oprot->writeFieldBegin("_reln", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->_reln)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_relpersistence", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((*(this->_relpersistence)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_forknum", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->_forknum)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_blknum", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->_blknum)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_readBufferMode", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((*(this->_readBufferMode)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_lsn", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64((*(this->_lsn)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


DataPageAccess_ReadBufferCommon_result::~DataPageAccess_ReadBufferCommon_result() noexcept {
}


uint32_t DataPageAccess_ReadBufferCommon_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DataPageAccess_ReadBufferCommon_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("DataPageAccess_ReadBufferCommon_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRING, 0);
    xfer += oprot->writeBinary(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


DataPageAccess_ReadBufferCommon_presult::~DataPageAccess_ReadBufferCommon_presult() noexcept {
}


uint32_t DataPageAccess_ReadBufferCommon_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


DataPageAccess_RpcMdRead_args::~DataPageAccess_RpcMdRead_args() noexcept {
}


uint32_t DataPageAccess_RpcMdRead_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_reln.read(iprot);
          this->__isset._reln = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_forknum);
          this->__isset._forknum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_blknum);
          this->__isset._blknum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_lsn);
          this->__isset._lsn = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DataPageAccess_RpcMdRead_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DataPageAccess_RpcMdRead_args");

  xfer += oprot->writeFieldBegin("_reln", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_reln.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_forknum", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->_forknum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_blknum", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->_blknum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_lsn", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->_lsn);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


DataPageAccess_RpcMdRead_pargs::~DataPageAccess_RpcMdRead_pargs() noexcept {
}


uint32_t DataPageAccess_RpcMdRead_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DataPageAccess_RpcMdRead_pargs");

  xfer += oprot->writeFieldBegin("_reln", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->_reln)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_forknum", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((*(this->_forknum)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_blknum", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64((*(this->_blknum)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_lsn", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64((*(this->_lsn)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


DataPageAccess_RpcMdRead_result::~DataPageAccess_RpcMdRead_result() noexcept {
}


uint32_t DataPageAccess_RpcMdRead_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DataPageAccess_RpcMdRead_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("DataPageAccess_RpcMdRead_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRING, 0);
    xfer += oprot->writeBinary(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


DataPageAccess_RpcMdRead_presult::~DataPageAccess_RpcMdRead_presult() noexcept {
}


uint32_t DataPageAccess_RpcMdRead_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


DataPageAccess_RpcMdNblocks_args::~DataPageAccess_RpcMdNblocks_args() noexcept {
}


uint32_t DataPageAccess_RpcMdNblocks_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_reln.read(iprot);
          this->__isset._reln = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_forknum);
          this->__isset._forknum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_lsn);
          this->__isset._lsn = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DataPageAccess_RpcMdNblocks_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DataPageAccess_RpcMdNblocks_args");

  xfer += oprot->writeFieldBegin("_reln", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_reln.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_forknum", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->_forknum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_lsn", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->_lsn);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


DataPageAccess_RpcMdNblocks_pargs::~DataPageAccess_RpcMdNblocks_pargs() noexcept {
}


uint32_t DataPageAccess_RpcMdNblocks_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DataPageAccess_RpcMdNblocks_pargs");

  xfer += oprot->writeFieldBegin("_reln", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->_reln)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_forknum", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((*(this->_forknum)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_lsn", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64((*(this->_lsn)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


DataPageAccess_RpcMdNblocks_result::~DataPageAccess_RpcMdNblocks_result() noexcept {
}


uint32_t DataPageAccess_RpcMdNblocks_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DataPageAccess_RpcMdNblocks_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("DataPageAccess_RpcMdNblocks_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


DataPageAccess_RpcMdNblocks_presult::~DataPageAccess_RpcMdNblocks_presult() noexcept {
}


uint32_t DataPageAccess_RpcMdNblocks_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


DataPageAccess_RpcMdExists_args::~DataPageAccess_RpcMdExists_args() noexcept {
}


uint32_t DataPageAccess_RpcMdExists_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_reln.read(iprot);
          this->__isset._reln = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_forknum);
          this->__isset._forknum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_lsn);
          this->__isset._lsn = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DataPageAccess_RpcMdExists_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DataPageAccess_RpcMdExists_args");

  xfer += oprot->writeFieldBegin("_reln", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_reln.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_forknum", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->_forknum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_lsn", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->_lsn);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


DataPageAccess_RpcMdExists_pargs::~DataPageAccess_RpcMdExists_pargs() noexcept {
}


uint32_t DataPageAccess_RpcMdExists_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DataPageAccess_RpcMdExists_pargs");

  xfer += oprot->writeFieldBegin("_reln", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->_reln)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_forknum", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((*(this->_forknum)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_lsn", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64((*(this->_lsn)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


DataPageAccess_RpcMdExists_result::~DataPageAccess_RpcMdExists_result() noexcept {
}


uint32_t DataPageAccess_RpcMdExists_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DataPageAccess_RpcMdExists_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("DataPageAccess_RpcMdExists_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


DataPageAccess_RpcMdExists_presult::~DataPageAccess_RpcMdExists_presult() noexcept {
}


uint32_t DataPageAccess_RpcMdExists_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


DataPageAccess_RpcMdCreate_args::~DataPageAccess_RpcMdCreate_args() noexcept {
}


uint32_t DataPageAccess_RpcMdCreate_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_reln.read(iprot);
          this->__isset._reln = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_forknum);
          this->__isset._forknum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_isRedo);
          this->__isset._isRedo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_lsn);
          this->__isset._lsn = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DataPageAccess_RpcMdCreate_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DataPageAccess_RpcMdCreate_args");

  xfer += oprot->writeFieldBegin("_reln", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_reln.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_forknum", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->_forknum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_isRedo", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->_isRedo);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_lsn", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->_lsn);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


DataPageAccess_RpcMdCreate_pargs::~DataPageAccess_RpcMdCreate_pargs() noexcept {
}


uint32_t DataPageAccess_RpcMdCreate_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DataPageAccess_RpcMdCreate_pargs");

  xfer += oprot->writeFieldBegin("_reln", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->_reln)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_forknum", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((*(this->_forknum)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_isRedo", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->_isRedo)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_lsn", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64((*(this->_lsn)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


DataPageAccess_RpcMdCreate_result::~DataPageAccess_RpcMdCreate_result() noexcept {
}


uint32_t DataPageAccess_RpcMdCreate_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DataPageAccess_RpcMdCreate_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("DataPageAccess_RpcMdCreate_result");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


DataPageAccess_RpcMdCreate_presult::~DataPageAccess_RpcMdCreate_presult() noexcept {
}


uint32_t DataPageAccess_RpcMdCreate_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


DataPageAccess_RpcMdExtend_args::~DataPageAccess_RpcMdExtend_args() noexcept {
}


uint32_t DataPageAccess_RpcMdExtend_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_reln.read(iprot);
          this->__isset._reln = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_forknum);
          this->__isset._forknum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_blknum);
          this->__isset._blknum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->_buff);
          this->__isset._buff = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->skipFsync);
          this->__isset.skipFsync = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_lsn);
          this->__isset._lsn = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DataPageAccess_RpcMdExtend_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DataPageAccess_RpcMdExtend_args");

  xfer += oprot->writeFieldBegin("_reln", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_reln.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_forknum", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->_forknum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_blknum", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->_blknum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_buff", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeBinary(this->_buff);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("skipFsync", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->skipFsync);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_lsn", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->_lsn);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


DataPageAccess_RpcMdExtend_pargs::~DataPageAccess_RpcMdExtend_pargs() noexcept {
}


uint32_t DataPageAccess_RpcMdExtend_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DataPageAccess_RpcMdExtend_pargs");

  xfer += oprot->writeFieldBegin("_reln", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->_reln)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_forknum", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((*(this->_forknum)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_blknum", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->_blknum)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_buff", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeBinary((*(this->_buff)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("skipFsync", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((*(this->skipFsync)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_lsn", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64((*(this->_lsn)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


DataPageAccess_RpcMdExtend_result::~DataPageAccess_RpcMdExtend_result() noexcept {
}


uint32_t DataPageAccess_RpcMdExtend_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DataPageAccess_RpcMdExtend_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("DataPageAccess_RpcMdExtend_result");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


DataPageAccess_RpcMdExtend_presult::~DataPageAccess_RpcMdExtend_presult() noexcept {
}


uint32_t DataPageAccess_RpcMdExtend_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


DataPageAccess_RpcTruncate_args::~DataPageAccess_RpcTruncate_args() noexcept {
}


uint32_t DataPageAccess_RpcTruncate_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_reln.read(iprot);
          this->__isset._reln = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_forknum);
          this->__isset._forknum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_blknum);
          this->__isset._blknum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_lsn);
          this->__isset._lsn = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DataPageAccess_RpcTruncate_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DataPageAccess_RpcTruncate_args");

  xfer += oprot->writeFieldBegin("_reln", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_reln.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_forknum", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->_forknum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_blknum", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->_blknum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_lsn", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->_lsn);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


DataPageAccess_RpcTruncate_pargs::~DataPageAccess_RpcTruncate_pargs() noexcept {
}


uint32_t DataPageAccess_RpcTruncate_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DataPageAccess_RpcTruncate_pargs");

  xfer += oprot->writeFieldBegin("_reln", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->_reln)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_forknum", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((*(this->_forknum)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_blknum", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->_blknum)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_lsn", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64((*(this->_lsn)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


DataPageAccess_RpcTruncate_result::~DataPageAccess_RpcTruncate_result() noexcept {
}


uint32_t DataPageAccess_RpcTruncate_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DataPageAccess_RpcTruncate_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("DataPageAccess_RpcTruncate_result");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


DataPageAccess_RpcTruncate_presult::~DataPageAccess_RpcTruncate_presult() noexcept {
}


uint32_t DataPageAccess_RpcTruncate_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


DataPageAccess_zip_args::~DataPageAccess_zip_args() noexcept {
}


uint32_t DataPageAccess_zip_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DataPageAccess_zip_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DataPageAccess_zip_args");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


DataPageAccess_zip_pargs::~DataPageAccess_zip_pargs() noexcept {
}


uint32_t DataPageAccess_zip_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DataPageAccess_zip_pargs");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void DataPageAccessClient::ReadBufferCommon(_Page& _return, const _Smgr_Relation& _reln, const int32_t _relpersistence, const int32_t _forknum, const int32_t _blknum, const int32_t _readBufferMode, const int64_t _lsn)
{
  send_ReadBufferCommon(_reln, _relpersistence, _forknum, _blknum, _readBufferMode, _lsn);
  recv_ReadBufferCommon(_return);
}

void DataPageAccessClient::send_ReadBufferCommon(const _Smgr_Relation& _reln, const int32_t _relpersistence, const int32_t _forknum, const int32_t _blknum, const int32_t _readBufferMode, const int64_t _lsn)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ReadBufferCommon", ::apache::thrift::protocol::T_CALL, cseqid);

  DataPageAccess_ReadBufferCommon_pargs args;
  args._reln = &_reln;
  args._relpersistence = &_relpersistence;
  args._forknum = &_forknum;
  args._blknum = &_blknum;
  args._readBufferMode = &_readBufferMode;
  args._lsn = &_lsn;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void DataPageAccessClient::recv_ReadBufferCommon(_Page& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ReadBufferCommon") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  DataPageAccess_ReadBufferCommon_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ReadBufferCommon failed: unknown result");
}

void DataPageAccessClient::RpcMdRead(_Page& _return, const _Smgr_Relation& _reln, const int32_t _forknum, const int64_t _blknum, const int64_t _lsn)
{
  send_RpcMdRead(_reln, _forknum, _blknum, _lsn);
  recv_RpcMdRead(_return);
}

void DataPageAccessClient::send_RpcMdRead(const _Smgr_Relation& _reln, const int32_t _forknum, const int64_t _blknum, const int64_t _lsn)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("RpcMdRead", ::apache::thrift::protocol::T_CALL, cseqid);

  DataPageAccess_RpcMdRead_pargs args;
  args._reln = &_reln;
  args._forknum = &_forknum;
  args._blknum = &_blknum;
  args._lsn = &_lsn;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void DataPageAccessClient::recv_RpcMdRead(_Page& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("RpcMdRead") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  DataPageAccess_RpcMdRead_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "RpcMdRead failed: unknown result");
}

int32_t DataPageAccessClient::RpcMdNblocks(const _Smgr_Relation& _reln, const int32_t _forknum, const int64_t _lsn)
{
  send_RpcMdNblocks(_reln, _forknum, _lsn);
  return recv_RpcMdNblocks();
}

void DataPageAccessClient::send_RpcMdNblocks(const _Smgr_Relation& _reln, const int32_t _forknum, const int64_t _lsn)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("RpcMdNblocks", ::apache::thrift::protocol::T_CALL, cseqid);

  DataPageAccess_RpcMdNblocks_pargs args;
  args._reln = &_reln;
  args._forknum = &_forknum;
  args._lsn = &_lsn;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t DataPageAccessClient::recv_RpcMdNblocks()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("RpcMdNblocks") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  DataPageAccess_RpcMdNblocks_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "RpcMdNblocks failed: unknown result");
}

int32_t DataPageAccessClient::RpcMdExists(const _Smgr_Relation& _reln, const int32_t _forknum, const int64_t _lsn)
{
  send_RpcMdExists(_reln, _forknum, _lsn);
  return recv_RpcMdExists();
}

void DataPageAccessClient::send_RpcMdExists(const _Smgr_Relation& _reln, const int32_t _forknum, const int64_t _lsn)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("RpcMdExists", ::apache::thrift::protocol::T_CALL, cseqid);

  DataPageAccess_RpcMdExists_pargs args;
  args._reln = &_reln;
  args._forknum = &_forknum;
  args._lsn = &_lsn;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t DataPageAccessClient::recv_RpcMdExists()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("RpcMdExists") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  DataPageAccess_RpcMdExists_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "RpcMdExists failed: unknown result");
}

void DataPageAccessClient::RpcMdCreate(const _Smgr_Relation& _reln, const int32_t _forknum, const int32_t _isRedo, const int64_t _lsn)
{
  send_RpcMdCreate(_reln, _forknum, _isRedo, _lsn);
  recv_RpcMdCreate();
}

void DataPageAccessClient::send_RpcMdCreate(const _Smgr_Relation& _reln, const int32_t _forknum, const int32_t _isRedo, const int64_t _lsn)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("RpcMdCreate", ::apache::thrift::protocol::T_CALL, cseqid);

  DataPageAccess_RpcMdCreate_pargs args;
  args._reln = &_reln;
  args._forknum = &_forknum;
  args._isRedo = &_isRedo;
  args._lsn = &_lsn;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void DataPageAccessClient::recv_RpcMdCreate()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("RpcMdCreate") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  DataPageAccess_RpcMdCreate_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  return;
}

void DataPageAccessClient::RpcMdExtend(const _Smgr_Relation& _reln, const int32_t _forknum, const int32_t _blknum, const _Page& _buff, const int32_t skipFsync, const int64_t _lsn)
{
  send_RpcMdExtend(_reln, _forknum, _blknum, _buff, skipFsync, _lsn);
  recv_RpcMdExtend();
}

void DataPageAccessClient::send_RpcMdExtend(const _Smgr_Relation& _reln, const int32_t _forknum, const int32_t _blknum, const _Page& _buff, const int32_t skipFsync, const int64_t _lsn)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("RpcMdExtend", ::apache::thrift::protocol::T_CALL, cseqid);

  DataPageAccess_RpcMdExtend_pargs args;
  args._reln = &_reln;
  args._forknum = &_forknum;
  args._blknum = &_blknum;
  args._buff = &_buff;
  args.skipFsync = &skipFsync;
  args._lsn = &_lsn;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void DataPageAccessClient::recv_RpcMdExtend()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("RpcMdExtend") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  DataPageAccess_RpcMdExtend_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  return;
}

void DataPageAccessClient::RpcTruncate(const _Smgr_Relation& _reln, const int32_t _forknum, const int32_t _blknum, const int64_t _lsn)
{
  send_RpcTruncate(_reln, _forknum, _blknum, _lsn);
  recv_RpcTruncate();
}

void DataPageAccessClient::send_RpcTruncate(const _Smgr_Relation& _reln, const int32_t _forknum, const int32_t _blknum, const int64_t _lsn)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("RpcTruncate", ::apache::thrift::protocol::T_CALL, cseqid);

  DataPageAccess_RpcTruncate_pargs args;
  args._reln = &_reln;
  args._forknum = &_forknum;
  args._blknum = &_blknum;
  args._lsn = &_lsn;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void DataPageAccessClient::recv_RpcTruncate()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("RpcTruncate") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  DataPageAccess_RpcTruncate_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  return;
}

void DataPageAccessClient::zip()
{
  send_zip();
}

void DataPageAccessClient::send_zip()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("zip", ::apache::thrift::protocol::T_ONEWAY, cseqid);

  DataPageAccess_zip_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

bool DataPageAccessProcessor::dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) {
  ProcessMap::iterator pfn;
  pfn = processMap_.find(fname);
  if (pfn == processMap_.end()) {
    iprot->skip(::apache::thrift::protocol::T_STRUCT);
    iprot->readMessageEnd();
    iprot->getTransport()->readEnd();
    ::apache::thrift::TApplicationException x(::apache::thrift::TApplicationException::UNKNOWN_METHOD, "Invalid method name: '"+fname+"'");
    oprot->writeMessageBegin(fname, ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return true;
  }
  (this->*(pfn->second))(seqid, iprot, oprot, callContext);
  return true;
}

void DataPageAccessProcessor::process_ReadBufferCommon(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = nullptr;
  if (this->eventHandler_.get() != nullptr) {
    ctx = this->eventHandler_->getContext("DataPageAccess.ReadBufferCommon", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "DataPageAccess.ReadBufferCommon");

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->preRead(ctx, "DataPageAccess.ReadBufferCommon");
  }

  DataPageAccess_ReadBufferCommon_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->postRead(ctx, "DataPageAccess.ReadBufferCommon", bytes);
  }

  DataPageAccess_ReadBufferCommon_result result;
  try {
    iface_->ReadBufferCommon(result.success, args._reln, args._relpersistence, args._forknum, args._blknum, args._readBufferMode, args._lsn);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != nullptr) {
      this->eventHandler_->handlerError(ctx, "DataPageAccess.ReadBufferCommon");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ReadBufferCommon", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->preWrite(ctx, "DataPageAccess.ReadBufferCommon");
  }

  oprot->writeMessageBegin("ReadBufferCommon", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->postWrite(ctx, "DataPageAccess.ReadBufferCommon", bytes);
  }
}

void DataPageAccessProcessor::process_RpcMdRead(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = nullptr;
  if (this->eventHandler_.get() != nullptr) {
    ctx = this->eventHandler_->getContext("DataPageAccess.RpcMdRead", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "DataPageAccess.RpcMdRead");

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->preRead(ctx, "DataPageAccess.RpcMdRead");
  }

  DataPageAccess_RpcMdRead_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->postRead(ctx, "DataPageAccess.RpcMdRead", bytes);
  }

  DataPageAccess_RpcMdRead_result result;
  try {
    iface_->RpcMdRead(result.success, args._reln, args._forknum, args._blknum, args._lsn);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != nullptr) {
      this->eventHandler_->handlerError(ctx, "DataPageAccess.RpcMdRead");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("RpcMdRead", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->preWrite(ctx, "DataPageAccess.RpcMdRead");
  }

  oprot->writeMessageBegin("RpcMdRead", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->postWrite(ctx, "DataPageAccess.RpcMdRead", bytes);
  }
}

void DataPageAccessProcessor::process_RpcMdNblocks(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = nullptr;
  if (this->eventHandler_.get() != nullptr) {
    ctx = this->eventHandler_->getContext("DataPageAccess.RpcMdNblocks", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "DataPageAccess.RpcMdNblocks");

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->preRead(ctx, "DataPageAccess.RpcMdNblocks");
  }

  DataPageAccess_RpcMdNblocks_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->postRead(ctx, "DataPageAccess.RpcMdNblocks", bytes);
  }

  DataPageAccess_RpcMdNblocks_result result;
  try {
    result.success = iface_->RpcMdNblocks(args._reln, args._forknum, args._lsn);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != nullptr) {
      this->eventHandler_->handlerError(ctx, "DataPageAccess.RpcMdNblocks");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("RpcMdNblocks", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->preWrite(ctx, "DataPageAccess.RpcMdNblocks");
  }

  oprot->writeMessageBegin("RpcMdNblocks", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->postWrite(ctx, "DataPageAccess.RpcMdNblocks", bytes);
  }
}

void DataPageAccessProcessor::process_RpcMdExists(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = nullptr;
  if (this->eventHandler_.get() != nullptr) {
    ctx = this->eventHandler_->getContext("DataPageAccess.RpcMdExists", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "DataPageAccess.RpcMdExists");

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->preRead(ctx, "DataPageAccess.RpcMdExists");
  }

  DataPageAccess_RpcMdExists_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->postRead(ctx, "DataPageAccess.RpcMdExists", bytes);
  }

  DataPageAccess_RpcMdExists_result result;
  try {
    result.success = iface_->RpcMdExists(args._reln, args._forknum, args._lsn);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != nullptr) {
      this->eventHandler_->handlerError(ctx, "DataPageAccess.RpcMdExists");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("RpcMdExists", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->preWrite(ctx, "DataPageAccess.RpcMdExists");
  }

  oprot->writeMessageBegin("RpcMdExists", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->postWrite(ctx, "DataPageAccess.RpcMdExists", bytes);
  }
}

void DataPageAccessProcessor::process_RpcMdCreate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = nullptr;
  if (this->eventHandler_.get() != nullptr) {
    ctx = this->eventHandler_->getContext("DataPageAccess.RpcMdCreate", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "DataPageAccess.RpcMdCreate");

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->preRead(ctx, "DataPageAccess.RpcMdCreate");
  }

  DataPageAccess_RpcMdCreate_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->postRead(ctx, "DataPageAccess.RpcMdCreate", bytes);
  }

  DataPageAccess_RpcMdCreate_result result;
  try {
    iface_->RpcMdCreate(args._reln, args._forknum, args._isRedo, args._lsn);
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != nullptr) {
      this->eventHandler_->handlerError(ctx, "DataPageAccess.RpcMdCreate");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("RpcMdCreate", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->preWrite(ctx, "DataPageAccess.RpcMdCreate");
  }

  oprot->writeMessageBegin("RpcMdCreate", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->postWrite(ctx, "DataPageAccess.RpcMdCreate", bytes);
  }
}

void DataPageAccessProcessor::process_RpcMdExtend(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = nullptr;
  if (this->eventHandler_.get() != nullptr) {
    ctx = this->eventHandler_->getContext("DataPageAccess.RpcMdExtend", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "DataPageAccess.RpcMdExtend");

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->preRead(ctx, "DataPageAccess.RpcMdExtend");
  }

  DataPageAccess_RpcMdExtend_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->postRead(ctx, "DataPageAccess.RpcMdExtend", bytes);
  }

  DataPageAccess_RpcMdExtend_result result;
  try {
    iface_->RpcMdExtend(args._reln, args._forknum, args._blknum, args._buff, args.skipFsync, args._lsn);
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != nullptr) {
      this->eventHandler_->handlerError(ctx, "DataPageAccess.RpcMdExtend");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("RpcMdExtend", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->preWrite(ctx, "DataPageAccess.RpcMdExtend");
  }

  oprot->writeMessageBegin("RpcMdExtend", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->postWrite(ctx, "DataPageAccess.RpcMdExtend", bytes);
  }
}

void DataPageAccessProcessor::process_RpcTruncate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = nullptr;
  if (this->eventHandler_.get() != nullptr) {
    ctx = this->eventHandler_->getContext("DataPageAccess.RpcTruncate", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "DataPageAccess.RpcTruncate");

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->preRead(ctx, "DataPageAccess.RpcTruncate");
  }

  DataPageAccess_RpcTruncate_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->postRead(ctx, "DataPageAccess.RpcTruncate", bytes);
  }

  DataPageAccess_RpcTruncate_result result;
  try {
    iface_->RpcTruncate(args._reln, args._forknum, args._blknum, args._lsn);
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != nullptr) {
      this->eventHandler_->handlerError(ctx, "DataPageAccess.RpcTruncate");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("RpcTruncate", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->preWrite(ctx, "DataPageAccess.RpcTruncate");
  }

  oprot->writeMessageBegin("RpcTruncate", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->postWrite(ctx, "DataPageAccess.RpcTruncate", bytes);
  }
}

void DataPageAccessProcessor::process_zip(int32_t, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol*, void* callContext)
{
  void* ctx = nullptr;
  if (this->eventHandler_.get() != nullptr) {
    ctx = this->eventHandler_->getContext("DataPageAccess.zip", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "DataPageAccess.zip");

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->preRead(ctx, "DataPageAccess.zip");
  }

  DataPageAccess_zip_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->postRead(ctx, "DataPageAccess.zip", bytes);
  }

  try {
    iface_->zip();
  } catch (const std::exception&) {
    if (this->eventHandler_.get() != nullptr) {
      this->eventHandler_->handlerError(ctx, "DataPageAccess.zip");
    }
    return;
  }

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->asyncComplete(ctx, "DataPageAccess.zip");
  }

  return;
}

::std::shared_ptr< ::apache::thrift::TProcessor > DataPageAccessProcessorFactory::getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) {
  ::apache::thrift::ReleaseHandler< DataPageAccessIfFactory > cleanup(handlerFactory_);
  ::std::shared_ptr< DataPageAccessIf > handler(handlerFactory_->getHandler(connInfo), cleanup);
  ::std::shared_ptr< ::apache::thrift::TProcessor > processor(new DataPageAccessProcessor(handler));
  return processor;
}

void DataPageAccessConcurrentClient::ReadBufferCommon(_Page& _return, const _Smgr_Relation& _reln, const int32_t _relpersistence, const int32_t _forknum, const int32_t _blknum, const int32_t _readBufferMode, const int64_t _lsn)
{
  int32_t seqid = send_ReadBufferCommon(_reln, _relpersistence, _forknum, _blknum, _readBufferMode, _lsn);
  recv_ReadBufferCommon(_return, seqid);
}

int32_t DataPageAccessConcurrentClient::send_ReadBufferCommon(const _Smgr_Relation& _reln, const int32_t _relpersistence, const int32_t _forknum, const int32_t _blknum, const int32_t _readBufferMode, const int64_t _lsn)
{
  int32_t cseqid = this->sync_->generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(this->sync_.get());
  oprot_->writeMessageBegin("ReadBufferCommon", ::apache::thrift::protocol::T_CALL, cseqid);

  DataPageAccess_ReadBufferCommon_pargs args;
  args._reln = &_reln;
  args._relpersistence = &_relpersistence;
  args._forknum = &_forknum;
  args._blknum = &_blknum;
  args._readBufferMode = &_readBufferMode;
  args._lsn = &_lsn;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

void DataPageAccessConcurrentClient::recv_ReadBufferCommon(_Page& _return, const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(this->sync_.get(), seqid);

  while(true) {
    if(!this->sync_->getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("ReadBufferCommon") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      DataPageAccess_ReadBufferCommon_presult result;
      result.success = &_return;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      if (result.__isset.success) {
        // _return pointer has now been filled
        sentry.commit();
        return;
      }
      // in a bad state, don't commit
      throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ReadBufferCommon failed: unknown result");
    }
    // seqid != rseqid
    this->sync_->updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_->waitForWork(seqid);
  } // end while(true)
}

void DataPageAccessConcurrentClient::RpcMdRead(_Page& _return, const _Smgr_Relation& _reln, const int32_t _forknum, const int64_t _blknum, const int64_t _lsn)
{
  int32_t seqid = send_RpcMdRead(_reln, _forknum, _blknum, _lsn);
  recv_RpcMdRead(_return, seqid);
}

int32_t DataPageAccessConcurrentClient::send_RpcMdRead(const _Smgr_Relation& _reln, const int32_t _forknum, const int64_t _blknum, const int64_t _lsn)
{
  int32_t cseqid = this->sync_->generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(this->sync_.get());
  oprot_->writeMessageBegin("RpcMdRead", ::apache::thrift::protocol::T_CALL, cseqid);

  DataPageAccess_RpcMdRead_pargs args;
  args._reln = &_reln;
  args._forknum = &_forknum;
  args._blknum = &_blknum;
  args._lsn = &_lsn;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

void DataPageAccessConcurrentClient::recv_RpcMdRead(_Page& _return, const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(this->sync_.get(), seqid);

  while(true) {
    if(!this->sync_->getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("RpcMdRead") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      DataPageAccess_RpcMdRead_presult result;
      result.success = &_return;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      if (result.__isset.success) {
        // _return pointer has now been filled
        sentry.commit();
        return;
      }
      // in a bad state, don't commit
      throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "RpcMdRead failed: unknown result");
    }
    // seqid != rseqid
    this->sync_->updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_->waitForWork(seqid);
  } // end while(true)
}

int32_t DataPageAccessConcurrentClient::RpcMdNblocks(const _Smgr_Relation& _reln, const int32_t _forknum, const int64_t _lsn)
{
  int32_t seqid = send_RpcMdNblocks(_reln, _forknum, _lsn);
  return recv_RpcMdNblocks(seqid);
}

int32_t DataPageAccessConcurrentClient::send_RpcMdNblocks(const _Smgr_Relation& _reln, const int32_t _forknum, const int64_t _lsn)
{
  int32_t cseqid = this->sync_->generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(this->sync_.get());
  oprot_->writeMessageBegin("RpcMdNblocks", ::apache::thrift::protocol::T_CALL, cseqid);

  DataPageAccess_RpcMdNblocks_pargs args;
  args._reln = &_reln;
  args._forknum = &_forknum;
  args._lsn = &_lsn;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

int32_t DataPageAccessConcurrentClient::recv_RpcMdNblocks(const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(this->sync_.get(), seqid);

  while(true) {
    if(!this->sync_->getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("RpcMdNblocks") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      int32_t _return;
      DataPageAccess_RpcMdNblocks_presult result;
      result.success = &_return;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      if (result.__isset.success) {
        sentry.commit();
        return _return;
      }
      // in a bad state, don't commit
      throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "RpcMdNblocks failed: unknown result");
    }
    // seqid != rseqid
    this->sync_->updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_->waitForWork(seqid);
  } // end while(true)
}

int32_t DataPageAccessConcurrentClient::RpcMdExists(const _Smgr_Relation& _reln, const int32_t _forknum, const int64_t _lsn)
{
  int32_t seqid = send_RpcMdExists(_reln, _forknum, _lsn);
  return recv_RpcMdExists(seqid);
}

int32_t DataPageAccessConcurrentClient::send_RpcMdExists(const _Smgr_Relation& _reln, const int32_t _forknum, const int64_t _lsn)
{
  int32_t cseqid = this->sync_->generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(this->sync_.get());
  oprot_->writeMessageBegin("RpcMdExists", ::apache::thrift::protocol::T_CALL, cseqid);

  DataPageAccess_RpcMdExists_pargs args;
  args._reln = &_reln;
  args._forknum = &_forknum;
  args._lsn = &_lsn;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

int32_t DataPageAccessConcurrentClient::recv_RpcMdExists(const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(this->sync_.get(), seqid);

  while(true) {
    if(!this->sync_->getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("RpcMdExists") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      int32_t _return;
      DataPageAccess_RpcMdExists_presult result;
      result.success = &_return;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      if (result.__isset.success) {
        sentry.commit();
        return _return;
      }
      // in a bad state, don't commit
      throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "RpcMdExists failed: unknown result");
    }
    // seqid != rseqid
    this->sync_->updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_->waitForWork(seqid);
  } // end while(true)
}

void DataPageAccessConcurrentClient::RpcMdCreate(const _Smgr_Relation& _reln, const int32_t _forknum, const int32_t _isRedo, const int64_t _lsn)
{
  int32_t seqid = send_RpcMdCreate(_reln, _forknum, _isRedo, _lsn);
  recv_RpcMdCreate(seqid);
}

int32_t DataPageAccessConcurrentClient::send_RpcMdCreate(const _Smgr_Relation& _reln, const int32_t _forknum, const int32_t _isRedo, const int64_t _lsn)
{
  int32_t cseqid = this->sync_->generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(this->sync_.get());
  oprot_->writeMessageBegin("RpcMdCreate", ::apache::thrift::protocol::T_CALL, cseqid);

  DataPageAccess_RpcMdCreate_pargs args;
  args._reln = &_reln;
  args._forknum = &_forknum;
  args._isRedo = &_isRedo;
  args._lsn = &_lsn;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

void DataPageAccessConcurrentClient::recv_RpcMdCreate(const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(this->sync_.get(), seqid);

  while(true) {
    if(!this->sync_->getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("RpcMdCreate") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      DataPageAccess_RpcMdCreate_presult result;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      sentry.commit();
      return;
    }
    // seqid != rseqid
    this->sync_->updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_->waitForWork(seqid);
  } // end while(true)
}

void DataPageAccessConcurrentClient::RpcMdExtend(const _Smgr_Relation& _reln, const int32_t _forknum, const int32_t _blknum, const _Page& _buff, const int32_t skipFsync, const int64_t _lsn)
{
  int32_t seqid = send_RpcMdExtend(_reln, _forknum, _blknum, _buff, skipFsync, _lsn);
  recv_RpcMdExtend(seqid);
}

int32_t DataPageAccessConcurrentClient::send_RpcMdExtend(const _Smgr_Relation& _reln, const int32_t _forknum, const int32_t _blknum, const _Page& _buff, const int32_t skipFsync, const int64_t _lsn)
{
  int32_t cseqid = this->sync_->generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(this->sync_.get());
  oprot_->writeMessageBegin("RpcMdExtend", ::apache::thrift::protocol::T_CALL, cseqid);

  DataPageAccess_RpcMdExtend_pargs args;
  args._reln = &_reln;
  args._forknum = &_forknum;
  args._blknum = &_blknum;
  args._buff = &_buff;
  args.skipFsync = &skipFsync;
  args._lsn = &_lsn;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

void DataPageAccessConcurrentClient::recv_RpcMdExtend(const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(this->sync_.get(), seqid);

  while(true) {
    if(!this->sync_->getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("RpcMdExtend") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      DataPageAccess_RpcMdExtend_presult result;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      sentry.commit();
      return;
    }
    // seqid != rseqid
    this->sync_->updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_->waitForWork(seqid);
  } // end while(true)
}

void DataPageAccessConcurrentClient::RpcTruncate(const _Smgr_Relation& _reln, const int32_t _forknum, const int32_t _blknum, const int64_t _lsn)
{
  int32_t seqid = send_RpcTruncate(_reln, _forknum, _blknum, _lsn);
  recv_RpcTruncate(seqid);
}

int32_t DataPageAccessConcurrentClient::send_RpcTruncate(const _Smgr_Relation& _reln, const int32_t _forknum, const int32_t _blknum, const int64_t _lsn)
{
  int32_t cseqid = this->sync_->generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(this->sync_.get());
  oprot_->writeMessageBegin("RpcTruncate", ::apache::thrift::protocol::T_CALL, cseqid);

  DataPageAccess_RpcTruncate_pargs args;
  args._reln = &_reln;
  args._forknum = &_forknum;
  args._blknum = &_blknum;
  args._lsn = &_lsn;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

void DataPageAccessConcurrentClient::recv_RpcTruncate(const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(this->sync_.get(), seqid);

  while(true) {
    if(!this->sync_->getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("RpcTruncate") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      DataPageAccess_RpcTruncate_presult result;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      sentry.commit();
      return;
    }
    // seqid != rseqid
    this->sync_->updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_->waitForWork(seqid);
  } // end while(true)
}

void DataPageAccessConcurrentClient::zip()
{
  send_zip();
}

void DataPageAccessConcurrentClient::send_zip()
{
  int32_t cseqid = 0;
  ::apache::thrift::async::TConcurrentSendSentry sentry(this->sync_.get());
  oprot_->writeMessageBegin("zip", ::apache::thrift::protocol::T_ONEWAY, cseqid);

  DataPageAccess_zip_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
}

} // namespace

