/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DataPageAccess_H
#define DataPageAccess_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "tutorial_types.h"

namespace tutorial {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

/**
 * Ahh, now onto the cool part, defining a service. Services just need a name
 * and can optionally inherit from another service using the extends keyword.
 */
class DataPageAccessIf {
 public:
  virtual ~DataPageAccessIf() {}

  /**
   * A method definition looks like C code. It has a return type, arguments,
   * and optionally a list of exceptions that it may throw. Note that argument
   * lists and exception lists are specified using the exact same syntax as
   * field lists in struct or exception definitions.
   * 
   * @param _reln
   * @param _relpersistence
   * @param _forknum
   * @param _blknum
   * @param _readBufferMode
   * @param _lsn
   */
  virtual void ReadBufferCommon(_Page& _return, const _Smgr_Relation& _reln, const int32_t _relpersistence, const int32_t _forknum, const int32_t _blknum, const int32_t _readBufferMode, const int64_t _lsn) = 0;
  virtual void RpcMdRead(_Page& _return, const _Smgr_Relation& _reln, const int32_t _forknum, const int64_t _blknum, const int64_t _lsn) = 0;
  virtual int32_t RpcMdNblocks(const _Smgr_Relation& _reln, const int32_t _forknum, const int64_t _lsn) = 0;
  virtual int32_t RpcMdExists(const _Smgr_Relation& _reln, const int32_t _forknum, const int64_t _lsn) = 0;
  virtual void RpcMdCreate(const _Smgr_Relation& _reln, const int32_t _forknum, const int32_t _isRedo, const int64_t _lsn) = 0;
  virtual void RpcMdExtend(const _Smgr_Relation& _reln, const int32_t _forknum, const int32_t _blknum, const _Page& _buff, const int32_t skipFsync, const int64_t _lsn) = 0;
  virtual void RpcTruncate(const _Smgr_Relation& _reln, const int32_t _forknum, const int32_t _blknum, const int64_t _lsn) = 0;
  virtual void RpcFileClose(const _File _fd) = 0;
  virtual void RpcTablespaceCreateDbspace(const _Oid _spcnode, const _Oid _dbnode, const bool isRedo) = 0;
  virtual _File RpcPathNameOpenFile(const _Path& _path, const _Flag _flag) = 0;
  virtual int32_t RpcFileWrite(const _File _fd, const _Page& _page, const int32_t _amount, const _Off_t _seekpos, const int32_t _wait_event_info) = 0;
  virtual void RpcFilePathName(_Path& _return, const _File _fd) = 0;
  virtual void RpcFileRead(_Page& _return, const _File _fd, const int32_t _amount, const _Off_t _seekpos, const int32_t _wait_event_info) = 0;
  virtual int32_t RpcFileTruncate(const _File _fd, const _Off_t _offset) = 0;
  virtual _Off_t RpcFileSize(const _File _fd) = 0;
  virtual int32_t RpcFilePrefetch(const _File _fd, const _Off_t _offset, const int32_t _amount, const int32_t wait_event_info) = 0;
  virtual void RpcFileWriteback(const _File _fd, const _Off_t _offset, const _Off_t nbytes, const int32_t wait_event_info) = 0;
  virtual int32_t RpcUnlink(const _Path& _path) = 0;
  virtual int32_t RpcFtruncate(const _File _fd, const _Off_t _offset) = 0;
  virtual void RpcInitFile(_Page& _return, const _Path& _path) = 0;
  virtual _File RpcOpenTransientFile(const _Path& _filename, const int32_t _fileflags) = 0;
  virtual int32_t RpcCloseTransientFile(const _File _fd) = 0;
  virtual void Rpcread(_Page& _return, const _File _fd, const int32_t size) = 0;
  virtual int32_t Rpcwrite(const _File _fd, const _Page& _page, const int32_t size) = 0;
  virtual int32_t RpcFileSync(const _File _fd, const int32_t _wait_event_info) = 0;
  virtual void RpcPgPRead(_Page& _return, const _File _fd, const int32_t _seg_bytes, const _Off_t _start_off) = 0;
  virtual int32_t RpcPgPWrite(const _File _fd, const _Page& _page, const int32_t _amount, const _Off_t _offset) = 0;
  virtual int32_t RpcClose(const _File _fd) = 0;
  virtual int32_t RpcBasicOpenFile(const _Path& _path, const int32_t _flags) = 0;
  virtual int32_t RpcPgFdatasync(const _File _fd) = 0;
  virtual int32_t RpcPgFsyncNoWritethrough(const _File _fd) = 0;
  virtual int32_t RpcLseek(const int32_t _fd, const _Off_t _offset, const int32_t _flag) = 0;
  virtual void RpcStat(_Stat_Resp& _return, const _Path& _path) = 0;
  virtual int32_t RpcDirectoryIsEmpty(const _Path& _path) = 0;
  virtual int32_t RpcCopyDir(const _Path& _src, const _Path& _dst) = 0;
  virtual int32_t RpcPgFsync(const int32_t _fd) = 0;
  virtual int32_t RpcDurableUnlink(const _Path& _fname, const int32_t _flag) = 0;
  virtual int32_t RpcDurableRenameExcl(const _Path& _oldFname, const _Path& _newFname, const int32_t _elevel) = 0;
  virtual int32_t RpcXLogWrite(const _File _fd, const _Page& _page, const int32_t _amount, const _Off_t _offset, const std::vector<int64_t> & _xlblocks, const int32_t _blknum, const int32_t _idx, const int64_t _lsn) = 0;
  virtual void RpcXLogFileInit(_XLog_Init_File_Resp& _return, const int64_t _logsegno, const int32_t _use_existent, const int32_t _use_lock) = 0;

  /**
   * This method has a oneway modifier. That means the client only makes
   * a request and does not listen for any response at all. Oneway methods
   * must be void.
   */
  virtual void zip() = 0;
};

class DataPageAccessIfFactory {
 public:
  typedef DataPageAccessIf Handler;

  virtual ~DataPageAccessIfFactory() {}

  virtual DataPageAccessIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DataPageAccessIf* /* handler */) = 0;
};

class DataPageAccessIfSingletonFactory : virtual public DataPageAccessIfFactory {
 public:
  DataPageAccessIfSingletonFactory(const ::std::shared_ptr<DataPageAccessIf>& iface) : iface_(iface) {}
  virtual ~DataPageAccessIfSingletonFactory() {}

  virtual DataPageAccessIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DataPageAccessIf* /* handler */) {}

 protected:
  ::std::shared_ptr<DataPageAccessIf> iface_;
};

class DataPageAccessNull : virtual public DataPageAccessIf {
 public:
  virtual ~DataPageAccessNull() {}
  void ReadBufferCommon(_Page& /* _return */, const _Smgr_Relation& /* _reln */, const int32_t /* _relpersistence */, const int32_t /* _forknum */, const int32_t /* _blknum */, const int32_t /* _readBufferMode */, const int64_t /* _lsn */) {
    return;
  }
  void RpcMdRead(_Page& /* _return */, const _Smgr_Relation& /* _reln */, const int32_t /* _forknum */, const int64_t /* _blknum */, const int64_t /* _lsn */) {
    return;
  }
  int32_t RpcMdNblocks(const _Smgr_Relation& /* _reln */, const int32_t /* _forknum */, const int64_t /* _lsn */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t RpcMdExists(const _Smgr_Relation& /* _reln */, const int32_t /* _forknum */, const int64_t /* _lsn */) {
    int32_t _return = 0;
    return _return;
  }
  void RpcMdCreate(const _Smgr_Relation& /* _reln */, const int32_t /* _forknum */, const int32_t /* _isRedo */, const int64_t /* _lsn */) {
    return;
  }
  void RpcMdExtend(const _Smgr_Relation& /* _reln */, const int32_t /* _forknum */, const int32_t /* _blknum */, const _Page& /* _buff */, const int32_t /* skipFsync */, const int64_t /* _lsn */) {
    return;
  }
  void RpcTruncate(const _Smgr_Relation& /* _reln */, const int32_t /* _forknum */, const int32_t /* _blknum */, const int64_t /* _lsn */) {
    return;
  }
  void RpcFileClose(const _File /* _fd */) {
    return;
  }
  void RpcTablespaceCreateDbspace(const _Oid /* _spcnode */, const _Oid /* _dbnode */, const bool /* isRedo */) {
    return;
  }
  _File RpcPathNameOpenFile(const _Path& /* _path */, const _Flag /* _flag */) {
    _File _return = 0;
    return _return;
  }
  int32_t RpcFileWrite(const _File /* _fd */, const _Page& /* _page */, const int32_t /* _amount */, const _Off_t /* _seekpos */, const int32_t /* _wait_event_info */) {
    int32_t _return = 0;
    return _return;
  }
  void RpcFilePathName(_Path& /* _return */, const _File /* _fd */) {
    return;
  }
  void RpcFileRead(_Page& /* _return */, const _File /* _fd */, const int32_t /* _amount */, const _Off_t /* _seekpos */, const int32_t /* _wait_event_info */) {
    return;
  }
  int32_t RpcFileTruncate(const _File /* _fd */, const _Off_t /* _offset */) {
    int32_t _return = 0;
    return _return;
  }
  _Off_t RpcFileSize(const _File /* _fd */) {
    _Off_t _return = 0;
    return _return;
  }
  int32_t RpcFilePrefetch(const _File /* _fd */, const _Off_t /* _offset */, const int32_t /* _amount */, const int32_t /* wait_event_info */) {
    int32_t _return = 0;
    return _return;
  }
  void RpcFileWriteback(const _File /* _fd */, const _Off_t /* _offset */, const _Off_t /* nbytes */, const int32_t /* wait_event_info */) {
    return;
  }
  int32_t RpcUnlink(const _Path& /* _path */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t RpcFtruncate(const _File /* _fd */, const _Off_t /* _offset */) {
    int32_t _return = 0;
    return _return;
  }
  void RpcInitFile(_Page& /* _return */, const _Path& /* _path */) {
    return;
  }
  _File RpcOpenTransientFile(const _Path& /* _filename */, const int32_t /* _fileflags */) {
    _File _return = 0;
    return _return;
  }
  int32_t RpcCloseTransientFile(const _File /* _fd */) {
    int32_t _return = 0;
    return _return;
  }
  void Rpcread(_Page& /* _return */, const _File /* _fd */, const int32_t /* size */) {
    return;
  }
  int32_t Rpcwrite(const _File /* _fd */, const _Page& /* _page */, const int32_t /* size */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t RpcFileSync(const _File /* _fd */, const int32_t /* _wait_event_info */) {
    int32_t _return = 0;
    return _return;
  }
  void RpcPgPRead(_Page& /* _return */, const _File /* _fd */, const int32_t /* _seg_bytes */, const _Off_t /* _start_off */) {
    return;
  }
  int32_t RpcPgPWrite(const _File /* _fd */, const _Page& /* _page */, const int32_t /* _amount */, const _Off_t /* _offset */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t RpcClose(const _File /* _fd */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t RpcBasicOpenFile(const _Path& /* _path */, const int32_t /* _flags */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t RpcPgFdatasync(const _File /* _fd */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t RpcPgFsyncNoWritethrough(const _File /* _fd */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t RpcLseek(const int32_t /* _fd */, const _Off_t /* _offset */, const int32_t /* _flag */) {
    int32_t _return = 0;
    return _return;
  }
  void RpcStat(_Stat_Resp& /* _return */, const _Path& /* _path */) {
    return;
  }
  int32_t RpcDirectoryIsEmpty(const _Path& /* _path */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t RpcCopyDir(const _Path& /* _src */, const _Path& /* _dst */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t RpcPgFsync(const int32_t /* _fd */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t RpcDurableUnlink(const _Path& /* _fname */, const int32_t /* _flag */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t RpcDurableRenameExcl(const _Path& /* _oldFname */, const _Path& /* _newFname */, const int32_t /* _elevel */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t RpcXLogWrite(const _File /* _fd */, const _Page& /* _page */, const int32_t /* _amount */, const _Off_t /* _offset */, const std::vector<int64_t> & /* _xlblocks */, const int32_t /* _blknum */, const int32_t /* _idx */, const int64_t /* _lsn */) {
    int32_t _return = 0;
    return _return;
  }
  void RpcXLogFileInit(_XLog_Init_File_Resp& /* _return */, const int64_t /* _logsegno */, const int32_t /* _use_existent */, const int32_t /* _use_lock */) {
    return;
  }
  void zip() {
    return;
  }
};

typedef struct _DataPageAccess_ReadBufferCommon_args__isset {
  _DataPageAccess_ReadBufferCommon_args__isset() : _reln(false), _relpersistence(false), _forknum(false), _blknum(false), _readBufferMode(false), _lsn(false) {}
  bool _reln :1;
  bool _relpersistence :1;
  bool _forknum :1;
  bool _blknum :1;
  bool _readBufferMode :1;
  bool _lsn :1;
} _DataPageAccess_ReadBufferCommon_args__isset;

class DataPageAccess_ReadBufferCommon_args {
 public:

  DataPageAccess_ReadBufferCommon_args(const DataPageAccess_ReadBufferCommon_args&);
  DataPageAccess_ReadBufferCommon_args& operator=(const DataPageAccess_ReadBufferCommon_args&);
  DataPageAccess_ReadBufferCommon_args() : _relpersistence(0), _forknum(0), _blknum(0), _readBufferMode(0), _lsn(0) {
  }

  virtual ~DataPageAccess_ReadBufferCommon_args() noexcept;
  _Smgr_Relation _reln;
  int32_t _relpersistence;
  int32_t _forknum;
  int32_t _blknum;
  int32_t _readBufferMode;
  int64_t _lsn;

  _DataPageAccess_ReadBufferCommon_args__isset __isset;

  void __set__reln(const _Smgr_Relation& val);

  void __set__relpersistence(const int32_t val);

  void __set__forknum(const int32_t val);

  void __set__blknum(const int32_t val);

  void __set__readBufferMode(const int32_t val);

  void __set__lsn(const int64_t val);

  bool operator == (const DataPageAccess_ReadBufferCommon_args & rhs) const
  {
    if (!(_reln == rhs._reln))
      return false;
    if (!(_relpersistence == rhs._relpersistence))
      return false;
    if (!(_forknum == rhs._forknum))
      return false;
    if (!(_blknum == rhs._blknum))
      return false;
    if (!(_readBufferMode == rhs._readBufferMode))
      return false;
    if (!(_lsn == rhs._lsn))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_ReadBufferCommon_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_ReadBufferCommon_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataPageAccess_ReadBufferCommon_pargs {
 public:


  virtual ~DataPageAccess_ReadBufferCommon_pargs() noexcept;
  const _Smgr_Relation* _reln;
  const int32_t* _relpersistence;
  const int32_t* _forknum;
  const int32_t* _blknum;
  const int32_t* _readBufferMode;
  const int64_t* _lsn;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_ReadBufferCommon_result__isset {
  _DataPageAccess_ReadBufferCommon_result__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_ReadBufferCommon_result__isset;

class DataPageAccess_ReadBufferCommon_result {
 public:

  DataPageAccess_ReadBufferCommon_result(const DataPageAccess_ReadBufferCommon_result&);
  DataPageAccess_ReadBufferCommon_result& operator=(const DataPageAccess_ReadBufferCommon_result&);
  DataPageAccess_ReadBufferCommon_result() : success() {
  }

  virtual ~DataPageAccess_ReadBufferCommon_result() noexcept;
  _Page success;

  _DataPageAccess_ReadBufferCommon_result__isset __isset;

  void __set_success(const _Page& val);

  bool operator == (const DataPageAccess_ReadBufferCommon_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_ReadBufferCommon_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_ReadBufferCommon_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_ReadBufferCommon_presult__isset {
  _DataPageAccess_ReadBufferCommon_presult__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_ReadBufferCommon_presult__isset;

class DataPageAccess_ReadBufferCommon_presult {
 public:


  virtual ~DataPageAccess_ReadBufferCommon_presult() noexcept;
  _Page* success;

  _DataPageAccess_ReadBufferCommon_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataPageAccess_RpcMdRead_args__isset {
  _DataPageAccess_RpcMdRead_args__isset() : _reln(false), _forknum(false), _blknum(false), _lsn(false) {}
  bool _reln :1;
  bool _forknum :1;
  bool _blknum :1;
  bool _lsn :1;
} _DataPageAccess_RpcMdRead_args__isset;

class DataPageAccess_RpcMdRead_args {
 public:

  DataPageAccess_RpcMdRead_args(const DataPageAccess_RpcMdRead_args&);
  DataPageAccess_RpcMdRead_args& operator=(const DataPageAccess_RpcMdRead_args&);
  DataPageAccess_RpcMdRead_args() : _forknum(0), _blknum(0), _lsn(0) {
  }

  virtual ~DataPageAccess_RpcMdRead_args() noexcept;
  _Smgr_Relation _reln;
  int32_t _forknum;
  int64_t _blknum;
  int64_t _lsn;

  _DataPageAccess_RpcMdRead_args__isset __isset;

  void __set__reln(const _Smgr_Relation& val);

  void __set__forknum(const int32_t val);

  void __set__blknum(const int64_t val);

  void __set__lsn(const int64_t val);

  bool operator == (const DataPageAccess_RpcMdRead_args & rhs) const
  {
    if (!(_reln == rhs._reln))
      return false;
    if (!(_forknum == rhs._forknum))
      return false;
    if (!(_blknum == rhs._blknum))
      return false;
    if (!(_lsn == rhs._lsn))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcMdRead_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcMdRead_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataPageAccess_RpcMdRead_pargs {
 public:


  virtual ~DataPageAccess_RpcMdRead_pargs() noexcept;
  const _Smgr_Relation* _reln;
  const int32_t* _forknum;
  const int64_t* _blknum;
  const int64_t* _lsn;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcMdRead_result__isset {
  _DataPageAccess_RpcMdRead_result__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcMdRead_result__isset;

class DataPageAccess_RpcMdRead_result {
 public:

  DataPageAccess_RpcMdRead_result(const DataPageAccess_RpcMdRead_result&);
  DataPageAccess_RpcMdRead_result& operator=(const DataPageAccess_RpcMdRead_result&);
  DataPageAccess_RpcMdRead_result() : success() {
  }

  virtual ~DataPageAccess_RpcMdRead_result() noexcept;
  _Page success;

  _DataPageAccess_RpcMdRead_result__isset __isset;

  void __set_success(const _Page& val);

  bool operator == (const DataPageAccess_RpcMdRead_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcMdRead_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcMdRead_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcMdRead_presult__isset {
  _DataPageAccess_RpcMdRead_presult__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcMdRead_presult__isset;

class DataPageAccess_RpcMdRead_presult {
 public:


  virtual ~DataPageAccess_RpcMdRead_presult() noexcept;
  _Page* success;

  _DataPageAccess_RpcMdRead_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataPageAccess_RpcMdNblocks_args__isset {
  _DataPageAccess_RpcMdNblocks_args__isset() : _reln(false), _forknum(false), _lsn(false) {}
  bool _reln :1;
  bool _forknum :1;
  bool _lsn :1;
} _DataPageAccess_RpcMdNblocks_args__isset;

class DataPageAccess_RpcMdNblocks_args {
 public:

  DataPageAccess_RpcMdNblocks_args(const DataPageAccess_RpcMdNblocks_args&);
  DataPageAccess_RpcMdNblocks_args& operator=(const DataPageAccess_RpcMdNblocks_args&);
  DataPageAccess_RpcMdNblocks_args() : _forknum(0), _lsn(0) {
  }

  virtual ~DataPageAccess_RpcMdNblocks_args() noexcept;
  _Smgr_Relation _reln;
  int32_t _forknum;
  int64_t _lsn;

  _DataPageAccess_RpcMdNblocks_args__isset __isset;

  void __set__reln(const _Smgr_Relation& val);

  void __set__forknum(const int32_t val);

  void __set__lsn(const int64_t val);

  bool operator == (const DataPageAccess_RpcMdNblocks_args & rhs) const
  {
    if (!(_reln == rhs._reln))
      return false;
    if (!(_forknum == rhs._forknum))
      return false;
    if (!(_lsn == rhs._lsn))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcMdNblocks_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcMdNblocks_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataPageAccess_RpcMdNblocks_pargs {
 public:


  virtual ~DataPageAccess_RpcMdNblocks_pargs() noexcept;
  const _Smgr_Relation* _reln;
  const int32_t* _forknum;
  const int64_t* _lsn;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcMdNblocks_result__isset {
  _DataPageAccess_RpcMdNblocks_result__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcMdNblocks_result__isset;

class DataPageAccess_RpcMdNblocks_result {
 public:

  DataPageAccess_RpcMdNblocks_result(const DataPageAccess_RpcMdNblocks_result&);
  DataPageAccess_RpcMdNblocks_result& operator=(const DataPageAccess_RpcMdNblocks_result&);
  DataPageAccess_RpcMdNblocks_result() : success(0) {
  }

  virtual ~DataPageAccess_RpcMdNblocks_result() noexcept;
  int32_t success;

  _DataPageAccess_RpcMdNblocks_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const DataPageAccess_RpcMdNblocks_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcMdNblocks_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcMdNblocks_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcMdNblocks_presult__isset {
  _DataPageAccess_RpcMdNblocks_presult__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcMdNblocks_presult__isset;

class DataPageAccess_RpcMdNblocks_presult {
 public:


  virtual ~DataPageAccess_RpcMdNblocks_presult() noexcept;
  int32_t* success;

  _DataPageAccess_RpcMdNblocks_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataPageAccess_RpcMdExists_args__isset {
  _DataPageAccess_RpcMdExists_args__isset() : _reln(false), _forknum(false), _lsn(false) {}
  bool _reln :1;
  bool _forknum :1;
  bool _lsn :1;
} _DataPageAccess_RpcMdExists_args__isset;

class DataPageAccess_RpcMdExists_args {
 public:

  DataPageAccess_RpcMdExists_args(const DataPageAccess_RpcMdExists_args&);
  DataPageAccess_RpcMdExists_args& operator=(const DataPageAccess_RpcMdExists_args&);
  DataPageAccess_RpcMdExists_args() : _forknum(0), _lsn(0) {
  }

  virtual ~DataPageAccess_RpcMdExists_args() noexcept;
  _Smgr_Relation _reln;
  int32_t _forknum;
  int64_t _lsn;

  _DataPageAccess_RpcMdExists_args__isset __isset;

  void __set__reln(const _Smgr_Relation& val);

  void __set__forknum(const int32_t val);

  void __set__lsn(const int64_t val);

  bool operator == (const DataPageAccess_RpcMdExists_args & rhs) const
  {
    if (!(_reln == rhs._reln))
      return false;
    if (!(_forknum == rhs._forknum))
      return false;
    if (!(_lsn == rhs._lsn))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcMdExists_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcMdExists_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataPageAccess_RpcMdExists_pargs {
 public:


  virtual ~DataPageAccess_RpcMdExists_pargs() noexcept;
  const _Smgr_Relation* _reln;
  const int32_t* _forknum;
  const int64_t* _lsn;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcMdExists_result__isset {
  _DataPageAccess_RpcMdExists_result__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcMdExists_result__isset;

class DataPageAccess_RpcMdExists_result {
 public:

  DataPageAccess_RpcMdExists_result(const DataPageAccess_RpcMdExists_result&);
  DataPageAccess_RpcMdExists_result& operator=(const DataPageAccess_RpcMdExists_result&);
  DataPageAccess_RpcMdExists_result() : success(0) {
  }

  virtual ~DataPageAccess_RpcMdExists_result() noexcept;
  int32_t success;

  _DataPageAccess_RpcMdExists_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const DataPageAccess_RpcMdExists_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcMdExists_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcMdExists_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcMdExists_presult__isset {
  _DataPageAccess_RpcMdExists_presult__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcMdExists_presult__isset;

class DataPageAccess_RpcMdExists_presult {
 public:


  virtual ~DataPageAccess_RpcMdExists_presult() noexcept;
  int32_t* success;

  _DataPageAccess_RpcMdExists_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataPageAccess_RpcMdCreate_args__isset {
  _DataPageAccess_RpcMdCreate_args__isset() : _reln(false), _forknum(false), _isRedo(false), _lsn(false) {}
  bool _reln :1;
  bool _forknum :1;
  bool _isRedo :1;
  bool _lsn :1;
} _DataPageAccess_RpcMdCreate_args__isset;

class DataPageAccess_RpcMdCreate_args {
 public:

  DataPageAccess_RpcMdCreate_args(const DataPageAccess_RpcMdCreate_args&);
  DataPageAccess_RpcMdCreate_args& operator=(const DataPageAccess_RpcMdCreate_args&);
  DataPageAccess_RpcMdCreate_args() : _forknum(0), _isRedo(0), _lsn(0) {
  }

  virtual ~DataPageAccess_RpcMdCreate_args() noexcept;
  _Smgr_Relation _reln;
  int32_t _forknum;
  int32_t _isRedo;
  int64_t _lsn;

  _DataPageAccess_RpcMdCreate_args__isset __isset;

  void __set__reln(const _Smgr_Relation& val);

  void __set__forknum(const int32_t val);

  void __set__isRedo(const int32_t val);

  void __set__lsn(const int64_t val);

  bool operator == (const DataPageAccess_RpcMdCreate_args & rhs) const
  {
    if (!(_reln == rhs._reln))
      return false;
    if (!(_forknum == rhs._forknum))
      return false;
    if (!(_isRedo == rhs._isRedo))
      return false;
    if (!(_lsn == rhs._lsn))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcMdCreate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcMdCreate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataPageAccess_RpcMdCreate_pargs {
 public:


  virtual ~DataPageAccess_RpcMdCreate_pargs() noexcept;
  const _Smgr_Relation* _reln;
  const int32_t* _forknum;
  const int32_t* _isRedo;
  const int64_t* _lsn;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataPageAccess_RpcMdCreate_result {
 public:

  DataPageAccess_RpcMdCreate_result(const DataPageAccess_RpcMdCreate_result&);
  DataPageAccess_RpcMdCreate_result& operator=(const DataPageAccess_RpcMdCreate_result&);
  DataPageAccess_RpcMdCreate_result() {
  }

  virtual ~DataPageAccess_RpcMdCreate_result() noexcept;

  bool operator == (const DataPageAccess_RpcMdCreate_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DataPageAccess_RpcMdCreate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcMdCreate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataPageAccess_RpcMdCreate_presult {
 public:


  virtual ~DataPageAccess_RpcMdCreate_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataPageAccess_RpcMdExtend_args__isset {
  _DataPageAccess_RpcMdExtend_args__isset() : _reln(false), _forknum(false), _blknum(false), _buff(false), skipFsync(false), _lsn(false) {}
  bool _reln :1;
  bool _forknum :1;
  bool _blknum :1;
  bool _buff :1;
  bool skipFsync :1;
  bool _lsn :1;
} _DataPageAccess_RpcMdExtend_args__isset;

class DataPageAccess_RpcMdExtend_args {
 public:

  DataPageAccess_RpcMdExtend_args(const DataPageAccess_RpcMdExtend_args&);
  DataPageAccess_RpcMdExtend_args& operator=(const DataPageAccess_RpcMdExtend_args&);
  DataPageAccess_RpcMdExtend_args() : _forknum(0), _blknum(0), _buff(), skipFsync(0), _lsn(0) {
  }

  virtual ~DataPageAccess_RpcMdExtend_args() noexcept;
  _Smgr_Relation _reln;
  int32_t _forknum;
  int32_t _blknum;
  _Page _buff;
  int32_t skipFsync;
  int64_t _lsn;

  _DataPageAccess_RpcMdExtend_args__isset __isset;

  void __set__reln(const _Smgr_Relation& val);

  void __set__forknum(const int32_t val);

  void __set__blknum(const int32_t val);

  void __set__buff(const _Page& val);

  void __set_skipFsync(const int32_t val);

  void __set__lsn(const int64_t val);

  bool operator == (const DataPageAccess_RpcMdExtend_args & rhs) const
  {
    if (!(_reln == rhs._reln))
      return false;
    if (!(_forknum == rhs._forknum))
      return false;
    if (!(_blknum == rhs._blknum))
      return false;
    if (!(_buff == rhs._buff))
      return false;
    if (!(skipFsync == rhs.skipFsync))
      return false;
    if (!(_lsn == rhs._lsn))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcMdExtend_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcMdExtend_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataPageAccess_RpcMdExtend_pargs {
 public:


  virtual ~DataPageAccess_RpcMdExtend_pargs() noexcept;
  const _Smgr_Relation* _reln;
  const int32_t* _forknum;
  const int32_t* _blknum;
  const _Page* _buff;
  const int32_t* skipFsync;
  const int64_t* _lsn;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataPageAccess_RpcMdExtend_result {
 public:

  DataPageAccess_RpcMdExtend_result(const DataPageAccess_RpcMdExtend_result&);
  DataPageAccess_RpcMdExtend_result& operator=(const DataPageAccess_RpcMdExtend_result&);
  DataPageAccess_RpcMdExtend_result() {
  }

  virtual ~DataPageAccess_RpcMdExtend_result() noexcept;

  bool operator == (const DataPageAccess_RpcMdExtend_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DataPageAccess_RpcMdExtend_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcMdExtend_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataPageAccess_RpcMdExtend_presult {
 public:


  virtual ~DataPageAccess_RpcMdExtend_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataPageAccess_RpcTruncate_args__isset {
  _DataPageAccess_RpcTruncate_args__isset() : _reln(false), _forknum(false), _blknum(false), _lsn(false) {}
  bool _reln :1;
  bool _forknum :1;
  bool _blknum :1;
  bool _lsn :1;
} _DataPageAccess_RpcTruncate_args__isset;

class DataPageAccess_RpcTruncate_args {
 public:

  DataPageAccess_RpcTruncate_args(const DataPageAccess_RpcTruncate_args&);
  DataPageAccess_RpcTruncate_args& operator=(const DataPageAccess_RpcTruncate_args&);
  DataPageAccess_RpcTruncate_args() : _forknum(0), _blknum(0), _lsn(0) {
  }

  virtual ~DataPageAccess_RpcTruncate_args() noexcept;
  _Smgr_Relation _reln;
  int32_t _forknum;
  int32_t _blknum;
  int64_t _lsn;

  _DataPageAccess_RpcTruncate_args__isset __isset;

  void __set__reln(const _Smgr_Relation& val);

  void __set__forknum(const int32_t val);

  void __set__blknum(const int32_t val);

  void __set__lsn(const int64_t val);

  bool operator == (const DataPageAccess_RpcTruncate_args & rhs) const
  {
    if (!(_reln == rhs._reln))
      return false;
    if (!(_forknum == rhs._forknum))
      return false;
    if (!(_blknum == rhs._blknum))
      return false;
    if (!(_lsn == rhs._lsn))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcTruncate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcTruncate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataPageAccess_RpcTruncate_pargs {
 public:


  virtual ~DataPageAccess_RpcTruncate_pargs() noexcept;
  const _Smgr_Relation* _reln;
  const int32_t* _forknum;
  const int32_t* _blknum;
  const int64_t* _lsn;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataPageAccess_RpcTruncate_result {
 public:

  DataPageAccess_RpcTruncate_result(const DataPageAccess_RpcTruncate_result&);
  DataPageAccess_RpcTruncate_result& operator=(const DataPageAccess_RpcTruncate_result&);
  DataPageAccess_RpcTruncate_result() {
  }

  virtual ~DataPageAccess_RpcTruncate_result() noexcept;

  bool operator == (const DataPageAccess_RpcTruncate_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DataPageAccess_RpcTruncate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcTruncate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataPageAccess_RpcTruncate_presult {
 public:


  virtual ~DataPageAccess_RpcTruncate_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataPageAccess_RpcFileClose_args__isset {
  _DataPageAccess_RpcFileClose_args__isset() : _fd(false) {}
  bool _fd :1;
} _DataPageAccess_RpcFileClose_args__isset;

class DataPageAccess_RpcFileClose_args {
 public:

  DataPageAccess_RpcFileClose_args(const DataPageAccess_RpcFileClose_args&);
  DataPageAccess_RpcFileClose_args& operator=(const DataPageAccess_RpcFileClose_args&);
  DataPageAccess_RpcFileClose_args() : _fd(0) {
  }

  virtual ~DataPageAccess_RpcFileClose_args() noexcept;
  _File _fd;

  _DataPageAccess_RpcFileClose_args__isset __isset;

  void __set__fd(const _File val);

  bool operator == (const DataPageAccess_RpcFileClose_args & rhs) const
  {
    if (!(_fd == rhs._fd))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcFileClose_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcFileClose_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataPageAccess_RpcFileClose_pargs {
 public:


  virtual ~DataPageAccess_RpcFileClose_pargs() noexcept;
  const _File* _fd;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataPageAccess_RpcFileClose_result {
 public:

  DataPageAccess_RpcFileClose_result(const DataPageAccess_RpcFileClose_result&);
  DataPageAccess_RpcFileClose_result& operator=(const DataPageAccess_RpcFileClose_result&);
  DataPageAccess_RpcFileClose_result() {
  }

  virtual ~DataPageAccess_RpcFileClose_result() noexcept;

  bool operator == (const DataPageAccess_RpcFileClose_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DataPageAccess_RpcFileClose_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcFileClose_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataPageAccess_RpcFileClose_presult {
 public:


  virtual ~DataPageAccess_RpcFileClose_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataPageAccess_RpcTablespaceCreateDbspace_args__isset {
  _DataPageAccess_RpcTablespaceCreateDbspace_args__isset() : _spcnode(false), _dbnode(false), isRedo(false) {}
  bool _spcnode :1;
  bool _dbnode :1;
  bool isRedo :1;
} _DataPageAccess_RpcTablespaceCreateDbspace_args__isset;

class DataPageAccess_RpcTablespaceCreateDbspace_args {
 public:

  DataPageAccess_RpcTablespaceCreateDbspace_args(const DataPageAccess_RpcTablespaceCreateDbspace_args&);
  DataPageAccess_RpcTablespaceCreateDbspace_args& operator=(const DataPageAccess_RpcTablespaceCreateDbspace_args&);
  DataPageAccess_RpcTablespaceCreateDbspace_args() : _spcnode(0), _dbnode(0), isRedo(0) {
  }

  virtual ~DataPageAccess_RpcTablespaceCreateDbspace_args() noexcept;
  _Oid _spcnode;
  _Oid _dbnode;
  bool isRedo;

  _DataPageAccess_RpcTablespaceCreateDbspace_args__isset __isset;

  void __set__spcnode(const _Oid val);

  void __set__dbnode(const _Oid val);

  void __set_isRedo(const bool val);

  bool operator == (const DataPageAccess_RpcTablespaceCreateDbspace_args & rhs) const
  {
    if (!(_spcnode == rhs._spcnode))
      return false;
    if (!(_dbnode == rhs._dbnode))
      return false;
    if (!(isRedo == rhs.isRedo))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcTablespaceCreateDbspace_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcTablespaceCreateDbspace_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataPageAccess_RpcTablespaceCreateDbspace_pargs {
 public:


  virtual ~DataPageAccess_RpcTablespaceCreateDbspace_pargs() noexcept;
  const _Oid* _spcnode;
  const _Oid* _dbnode;
  const bool* isRedo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataPageAccess_RpcTablespaceCreateDbspace_result {
 public:

  DataPageAccess_RpcTablespaceCreateDbspace_result(const DataPageAccess_RpcTablespaceCreateDbspace_result&);
  DataPageAccess_RpcTablespaceCreateDbspace_result& operator=(const DataPageAccess_RpcTablespaceCreateDbspace_result&);
  DataPageAccess_RpcTablespaceCreateDbspace_result() {
  }

  virtual ~DataPageAccess_RpcTablespaceCreateDbspace_result() noexcept;

  bool operator == (const DataPageAccess_RpcTablespaceCreateDbspace_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DataPageAccess_RpcTablespaceCreateDbspace_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcTablespaceCreateDbspace_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataPageAccess_RpcTablespaceCreateDbspace_presult {
 public:


  virtual ~DataPageAccess_RpcTablespaceCreateDbspace_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataPageAccess_RpcPathNameOpenFile_args__isset {
  _DataPageAccess_RpcPathNameOpenFile_args__isset() : _path(false), _flag(false) {}
  bool _path :1;
  bool _flag :1;
} _DataPageAccess_RpcPathNameOpenFile_args__isset;

class DataPageAccess_RpcPathNameOpenFile_args {
 public:

  DataPageAccess_RpcPathNameOpenFile_args(const DataPageAccess_RpcPathNameOpenFile_args&);
  DataPageAccess_RpcPathNameOpenFile_args& operator=(const DataPageAccess_RpcPathNameOpenFile_args&);
  DataPageAccess_RpcPathNameOpenFile_args() : _path(), _flag(0) {
  }

  virtual ~DataPageAccess_RpcPathNameOpenFile_args() noexcept;
  _Path _path;
  _Flag _flag;

  _DataPageAccess_RpcPathNameOpenFile_args__isset __isset;

  void __set__path(const _Path& val);

  void __set__flag(const _Flag val);

  bool operator == (const DataPageAccess_RpcPathNameOpenFile_args & rhs) const
  {
    if (!(_path == rhs._path))
      return false;
    if (!(_flag == rhs._flag))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcPathNameOpenFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcPathNameOpenFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataPageAccess_RpcPathNameOpenFile_pargs {
 public:


  virtual ~DataPageAccess_RpcPathNameOpenFile_pargs() noexcept;
  const _Path* _path;
  const _Flag* _flag;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcPathNameOpenFile_result__isset {
  _DataPageAccess_RpcPathNameOpenFile_result__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcPathNameOpenFile_result__isset;

class DataPageAccess_RpcPathNameOpenFile_result {
 public:

  DataPageAccess_RpcPathNameOpenFile_result(const DataPageAccess_RpcPathNameOpenFile_result&);
  DataPageAccess_RpcPathNameOpenFile_result& operator=(const DataPageAccess_RpcPathNameOpenFile_result&);
  DataPageAccess_RpcPathNameOpenFile_result() : success(0) {
  }

  virtual ~DataPageAccess_RpcPathNameOpenFile_result() noexcept;
  _File success;

  _DataPageAccess_RpcPathNameOpenFile_result__isset __isset;

  void __set_success(const _File val);

  bool operator == (const DataPageAccess_RpcPathNameOpenFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcPathNameOpenFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcPathNameOpenFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcPathNameOpenFile_presult__isset {
  _DataPageAccess_RpcPathNameOpenFile_presult__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcPathNameOpenFile_presult__isset;

class DataPageAccess_RpcPathNameOpenFile_presult {
 public:


  virtual ~DataPageAccess_RpcPathNameOpenFile_presult() noexcept;
  _File* success;

  _DataPageAccess_RpcPathNameOpenFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataPageAccess_RpcFileWrite_args__isset {
  _DataPageAccess_RpcFileWrite_args__isset() : _fd(false), _page(false), _amount(false), _seekpos(false), _wait_event_info(false) {}
  bool _fd :1;
  bool _page :1;
  bool _amount :1;
  bool _seekpos :1;
  bool _wait_event_info :1;
} _DataPageAccess_RpcFileWrite_args__isset;

class DataPageAccess_RpcFileWrite_args {
 public:

  DataPageAccess_RpcFileWrite_args(const DataPageAccess_RpcFileWrite_args&);
  DataPageAccess_RpcFileWrite_args& operator=(const DataPageAccess_RpcFileWrite_args&);
  DataPageAccess_RpcFileWrite_args() : _fd(0), _page(), _amount(0), _seekpos(0), _wait_event_info(0) {
  }

  virtual ~DataPageAccess_RpcFileWrite_args() noexcept;
  _File _fd;
  _Page _page;
  int32_t _amount;
  _Off_t _seekpos;
  int32_t _wait_event_info;

  _DataPageAccess_RpcFileWrite_args__isset __isset;

  void __set__fd(const _File val);

  void __set__page(const _Page& val);

  void __set__amount(const int32_t val);

  void __set__seekpos(const _Off_t val);

  void __set__wait_event_info(const int32_t val);

  bool operator == (const DataPageAccess_RpcFileWrite_args & rhs) const
  {
    if (!(_fd == rhs._fd))
      return false;
    if (!(_page == rhs._page))
      return false;
    if (!(_amount == rhs._amount))
      return false;
    if (!(_seekpos == rhs._seekpos))
      return false;
    if (!(_wait_event_info == rhs._wait_event_info))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcFileWrite_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcFileWrite_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataPageAccess_RpcFileWrite_pargs {
 public:


  virtual ~DataPageAccess_RpcFileWrite_pargs() noexcept;
  const _File* _fd;
  const _Page* _page;
  const int32_t* _amount;
  const _Off_t* _seekpos;
  const int32_t* _wait_event_info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcFileWrite_result__isset {
  _DataPageAccess_RpcFileWrite_result__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcFileWrite_result__isset;

class DataPageAccess_RpcFileWrite_result {
 public:

  DataPageAccess_RpcFileWrite_result(const DataPageAccess_RpcFileWrite_result&);
  DataPageAccess_RpcFileWrite_result& operator=(const DataPageAccess_RpcFileWrite_result&);
  DataPageAccess_RpcFileWrite_result() : success(0) {
  }

  virtual ~DataPageAccess_RpcFileWrite_result() noexcept;
  int32_t success;

  _DataPageAccess_RpcFileWrite_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const DataPageAccess_RpcFileWrite_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcFileWrite_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcFileWrite_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcFileWrite_presult__isset {
  _DataPageAccess_RpcFileWrite_presult__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcFileWrite_presult__isset;

class DataPageAccess_RpcFileWrite_presult {
 public:


  virtual ~DataPageAccess_RpcFileWrite_presult() noexcept;
  int32_t* success;

  _DataPageAccess_RpcFileWrite_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataPageAccess_RpcFilePathName_args__isset {
  _DataPageAccess_RpcFilePathName_args__isset() : _fd(false) {}
  bool _fd :1;
} _DataPageAccess_RpcFilePathName_args__isset;

class DataPageAccess_RpcFilePathName_args {
 public:

  DataPageAccess_RpcFilePathName_args(const DataPageAccess_RpcFilePathName_args&);
  DataPageAccess_RpcFilePathName_args& operator=(const DataPageAccess_RpcFilePathName_args&);
  DataPageAccess_RpcFilePathName_args() : _fd(0) {
  }

  virtual ~DataPageAccess_RpcFilePathName_args() noexcept;
  _File _fd;

  _DataPageAccess_RpcFilePathName_args__isset __isset;

  void __set__fd(const _File val);

  bool operator == (const DataPageAccess_RpcFilePathName_args & rhs) const
  {
    if (!(_fd == rhs._fd))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcFilePathName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcFilePathName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataPageAccess_RpcFilePathName_pargs {
 public:


  virtual ~DataPageAccess_RpcFilePathName_pargs() noexcept;
  const _File* _fd;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcFilePathName_result__isset {
  _DataPageAccess_RpcFilePathName_result__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcFilePathName_result__isset;

class DataPageAccess_RpcFilePathName_result {
 public:

  DataPageAccess_RpcFilePathName_result(const DataPageAccess_RpcFilePathName_result&);
  DataPageAccess_RpcFilePathName_result& operator=(const DataPageAccess_RpcFilePathName_result&);
  DataPageAccess_RpcFilePathName_result() : success() {
  }

  virtual ~DataPageAccess_RpcFilePathName_result() noexcept;
  _Path success;

  _DataPageAccess_RpcFilePathName_result__isset __isset;

  void __set_success(const _Path& val);

  bool operator == (const DataPageAccess_RpcFilePathName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcFilePathName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcFilePathName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcFilePathName_presult__isset {
  _DataPageAccess_RpcFilePathName_presult__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcFilePathName_presult__isset;

class DataPageAccess_RpcFilePathName_presult {
 public:


  virtual ~DataPageAccess_RpcFilePathName_presult() noexcept;
  _Path* success;

  _DataPageAccess_RpcFilePathName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataPageAccess_RpcFileRead_args__isset {
  _DataPageAccess_RpcFileRead_args__isset() : _fd(false), _amount(false), _seekpos(false), _wait_event_info(false) {}
  bool _fd :1;
  bool _amount :1;
  bool _seekpos :1;
  bool _wait_event_info :1;
} _DataPageAccess_RpcFileRead_args__isset;

class DataPageAccess_RpcFileRead_args {
 public:

  DataPageAccess_RpcFileRead_args(const DataPageAccess_RpcFileRead_args&);
  DataPageAccess_RpcFileRead_args& operator=(const DataPageAccess_RpcFileRead_args&);
  DataPageAccess_RpcFileRead_args() : _fd(0), _amount(0), _seekpos(0), _wait_event_info(0) {
  }

  virtual ~DataPageAccess_RpcFileRead_args() noexcept;
  _File _fd;
  int32_t _amount;
  _Off_t _seekpos;
  int32_t _wait_event_info;

  _DataPageAccess_RpcFileRead_args__isset __isset;

  void __set__fd(const _File val);

  void __set__amount(const int32_t val);

  void __set__seekpos(const _Off_t val);

  void __set__wait_event_info(const int32_t val);

  bool operator == (const DataPageAccess_RpcFileRead_args & rhs) const
  {
    if (!(_fd == rhs._fd))
      return false;
    if (!(_amount == rhs._amount))
      return false;
    if (!(_seekpos == rhs._seekpos))
      return false;
    if (!(_wait_event_info == rhs._wait_event_info))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcFileRead_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcFileRead_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataPageAccess_RpcFileRead_pargs {
 public:


  virtual ~DataPageAccess_RpcFileRead_pargs() noexcept;
  const _File* _fd;
  const int32_t* _amount;
  const _Off_t* _seekpos;
  const int32_t* _wait_event_info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcFileRead_result__isset {
  _DataPageAccess_RpcFileRead_result__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcFileRead_result__isset;

class DataPageAccess_RpcFileRead_result {
 public:

  DataPageAccess_RpcFileRead_result(const DataPageAccess_RpcFileRead_result&);
  DataPageAccess_RpcFileRead_result& operator=(const DataPageAccess_RpcFileRead_result&);
  DataPageAccess_RpcFileRead_result() : success() {
  }

  virtual ~DataPageAccess_RpcFileRead_result() noexcept;
  _Page success;

  _DataPageAccess_RpcFileRead_result__isset __isset;

  void __set_success(const _Page& val);

  bool operator == (const DataPageAccess_RpcFileRead_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcFileRead_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcFileRead_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcFileRead_presult__isset {
  _DataPageAccess_RpcFileRead_presult__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcFileRead_presult__isset;

class DataPageAccess_RpcFileRead_presult {
 public:


  virtual ~DataPageAccess_RpcFileRead_presult() noexcept;
  _Page* success;

  _DataPageAccess_RpcFileRead_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataPageAccess_RpcFileTruncate_args__isset {
  _DataPageAccess_RpcFileTruncate_args__isset() : _fd(false), _offset(false) {}
  bool _fd :1;
  bool _offset :1;
} _DataPageAccess_RpcFileTruncate_args__isset;

class DataPageAccess_RpcFileTruncate_args {
 public:

  DataPageAccess_RpcFileTruncate_args(const DataPageAccess_RpcFileTruncate_args&);
  DataPageAccess_RpcFileTruncate_args& operator=(const DataPageAccess_RpcFileTruncate_args&);
  DataPageAccess_RpcFileTruncate_args() : _fd(0), _offset(0) {
  }

  virtual ~DataPageAccess_RpcFileTruncate_args() noexcept;
  _File _fd;
  _Off_t _offset;

  _DataPageAccess_RpcFileTruncate_args__isset __isset;

  void __set__fd(const _File val);

  void __set__offset(const _Off_t val);

  bool operator == (const DataPageAccess_RpcFileTruncate_args & rhs) const
  {
    if (!(_fd == rhs._fd))
      return false;
    if (!(_offset == rhs._offset))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcFileTruncate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcFileTruncate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataPageAccess_RpcFileTruncate_pargs {
 public:


  virtual ~DataPageAccess_RpcFileTruncate_pargs() noexcept;
  const _File* _fd;
  const _Off_t* _offset;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcFileTruncate_result__isset {
  _DataPageAccess_RpcFileTruncate_result__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcFileTruncate_result__isset;

class DataPageAccess_RpcFileTruncate_result {
 public:

  DataPageAccess_RpcFileTruncate_result(const DataPageAccess_RpcFileTruncate_result&);
  DataPageAccess_RpcFileTruncate_result& operator=(const DataPageAccess_RpcFileTruncate_result&);
  DataPageAccess_RpcFileTruncate_result() : success(0) {
  }

  virtual ~DataPageAccess_RpcFileTruncate_result() noexcept;
  int32_t success;

  _DataPageAccess_RpcFileTruncate_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const DataPageAccess_RpcFileTruncate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcFileTruncate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcFileTruncate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcFileTruncate_presult__isset {
  _DataPageAccess_RpcFileTruncate_presult__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcFileTruncate_presult__isset;

class DataPageAccess_RpcFileTruncate_presult {
 public:


  virtual ~DataPageAccess_RpcFileTruncate_presult() noexcept;
  int32_t* success;

  _DataPageAccess_RpcFileTruncate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataPageAccess_RpcFileSize_args__isset {
  _DataPageAccess_RpcFileSize_args__isset() : _fd(false) {}
  bool _fd :1;
} _DataPageAccess_RpcFileSize_args__isset;

class DataPageAccess_RpcFileSize_args {
 public:

  DataPageAccess_RpcFileSize_args(const DataPageAccess_RpcFileSize_args&);
  DataPageAccess_RpcFileSize_args& operator=(const DataPageAccess_RpcFileSize_args&);
  DataPageAccess_RpcFileSize_args() : _fd(0) {
  }

  virtual ~DataPageAccess_RpcFileSize_args() noexcept;
  _File _fd;

  _DataPageAccess_RpcFileSize_args__isset __isset;

  void __set__fd(const _File val);

  bool operator == (const DataPageAccess_RpcFileSize_args & rhs) const
  {
    if (!(_fd == rhs._fd))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcFileSize_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcFileSize_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataPageAccess_RpcFileSize_pargs {
 public:


  virtual ~DataPageAccess_RpcFileSize_pargs() noexcept;
  const _File* _fd;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcFileSize_result__isset {
  _DataPageAccess_RpcFileSize_result__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcFileSize_result__isset;

class DataPageAccess_RpcFileSize_result {
 public:

  DataPageAccess_RpcFileSize_result(const DataPageAccess_RpcFileSize_result&);
  DataPageAccess_RpcFileSize_result& operator=(const DataPageAccess_RpcFileSize_result&);
  DataPageAccess_RpcFileSize_result() : success(0) {
  }

  virtual ~DataPageAccess_RpcFileSize_result() noexcept;
  _Off_t success;

  _DataPageAccess_RpcFileSize_result__isset __isset;

  void __set_success(const _Off_t val);

  bool operator == (const DataPageAccess_RpcFileSize_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcFileSize_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcFileSize_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcFileSize_presult__isset {
  _DataPageAccess_RpcFileSize_presult__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcFileSize_presult__isset;

class DataPageAccess_RpcFileSize_presult {
 public:


  virtual ~DataPageAccess_RpcFileSize_presult() noexcept;
  _Off_t* success;

  _DataPageAccess_RpcFileSize_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataPageAccess_RpcFilePrefetch_args__isset {
  _DataPageAccess_RpcFilePrefetch_args__isset() : _fd(false), _offset(false), _amount(false), wait_event_info(false) {}
  bool _fd :1;
  bool _offset :1;
  bool _amount :1;
  bool wait_event_info :1;
} _DataPageAccess_RpcFilePrefetch_args__isset;

class DataPageAccess_RpcFilePrefetch_args {
 public:

  DataPageAccess_RpcFilePrefetch_args(const DataPageAccess_RpcFilePrefetch_args&);
  DataPageAccess_RpcFilePrefetch_args& operator=(const DataPageAccess_RpcFilePrefetch_args&);
  DataPageAccess_RpcFilePrefetch_args() : _fd(0), _offset(0), _amount(0), wait_event_info(0) {
  }

  virtual ~DataPageAccess_RpcFilePrefetch_args() noexcept;
  _File _fd;
  _Off_t _offset;
  int32_t _amount;
  int32_t wait_event_info;

  _DataPageAccess_RpcFilePrefetch_args__isset __isset;

  void __set__fd(const _File val);

  void __set__offset(const _Off_t val);

  void __set__amount(const int32_t val);

  void __set_wait_event_info(const int32_t val);

  bool operator == (const DataPageAccess_RpcFilePrefetch_args & rhs) const
  {
    if (!(_fd == rhs._fd))
      return false;
    if (!(_offset == rhs._offset))
      return false;
    if (!(_amount == rhs._amount))
      return false;
    if (!(wait_event_info == rhs.wait_event_info))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcFilePrefetch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcFilePrefetch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataPageAccess_RpcFilePrefetch_pargs {
 public:


  virtual ~DataPageAccess_RpcFilePrefetch_pargs() noexcept;
  const _File* _fd;
  const _Off_t* _offset;
  const int32_t* _amount;
  const int32_t* wait_event_info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcFilePrefetch_result__isset {
  _DataPageAccess_RpcFilePrefetch_result__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcFilePrefetch_result__isset;

class DataPageAccess_RpcFilePrefetch_result {
 public:

  DataPageAccess_RpcFilePrefetch_result(const DataPageAccess_RpcFilePrefetch_result&);
  DataPageAccess_RpcFilePrefetch_result& operator=(const DataPageAccess_RpcFilePrefetch_result&);
  DataPageAccess_RpcFilePrefetch_result() : success(0) {
  }

  virtual ~DataPageAccess_RpcFilePrefetch_result() noexcept;
  int32_t success;

  _DataPageAccess_RpcFilePrefetch_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const DataPageAccess_RpcFilePrefetch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcFilePrefetch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcFilePrefetch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcFilePrefetch_presult__isset {
  _DataPageAccess_RpcFilePrefetch_presult__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcFilePrefetch_presult__isset;

class DataPageAccess_RpcFilePrefetch_presult {
 public:


  virtual ~DataPageAccess_RpcFilePrefetch_presult() noexcept;
  int32_t* success;

  _DataPageAccess_RpcFilePrefetch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataPageAccess_RpcFileWriteback_args__isset {
  _DataPageAccess_RpcFileWriteback_args__isset() : _fd(false), _offset(false), nbytes(false), wait_event_info(false) {}
  bool _fd :1;
  bool _offset :1;
  bool nbytes :1;
  bool wait_event_info :1;
} _DataPageAccess_RpcFileWriteback_args__isset;

class DataPageAccess_RpcFileWriteback_args {
 public:

  DataPageAccess_RpcFileWriteback_args(const DataPageAccess_RpcFileWriteback_args&);
  DataPageAccess_RpcFileWriteback_args& operator=(const DataPageAccess_RpcFileWriteback_args&);
  DataPageAccess_RpcFileWriteback_args() : _fd(0), _offset(0), nbytes(0), wait_event_info(0) {
  }

  virtual ~DataPageAccess_RpcFileWriteback_args() noexcept;
  _File _fd;
  _Off_t _offset;
  _Off_t nbytes;
  int32_t wait_event_info;

  _DataPageAccess_RpcFileWriteback_args__isset __isset;

  void __set__fd(const _File val);

  void __set__offset(const _Off_t val);

  void __set_nbytes(const _Off_t val);

  void __set_wait_event_info(const int32_t val);

  bool operator == (const DataPageAccess_RpcFileWriteback_args & rhs) const
  {
    if (!(_fd == rhs._fd))
      return false;
    if (!(_offset == rhs._offset))
      return false;
    if (!(nbytes == rhs.nbytes))
      return false;
    if (!(wait_event_info == rhs.wait_event_info))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcFileWriteback_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcFileWriteback_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataPageAccess_RpcFileWriteback_pargs {
 public:


  virtual ~DataPageAccess_RpcFileWriteback_pargs() noexcept;
  const _File* _fd;
  const _Off_t* _offset;
  const _Off_t* nbytes;
  const int32_t* wait_event_info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataPageAccess_RpcFileWriteback_result {
 public:

  DataPageAccess_RpcFileWriteback_result(const DataPageAccess_RpcFileWriteback_result&);
  DataPageAccess_RpcFileWriteback_result& operator=(const DataPageAccess_RpcFileWriteback_result&);
  DataPageAccess_RpcFileWriteback_result() {
  }

  virtual ~DataPageAccess_RpcFileWriteback_result() noexcept;

  bool operator == (const DataPageAccess_RpcFileWriteback_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DataPageAccess_RpcFileWriteback_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcFileWriteback_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataPageAccess_RpcFileWriteback_presult {
 public:


  virtual ~DataPageAccess_RpcFileWriteback_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataPageAccess_RpcUnlink_args__isset {
  _DataPageAccess_RpcUnlink_args__isset() : _path(false) {}
  bool _path :1;
} _DataPageAccess_RpcUnlink_args__isset;

class DataPageAccess_RpcUnlink_args {
 public:

  DataPageAccess_RpcUnlink_args(const DataPageAccess_RpcUnlink_args&);
  DataPageAccess_RpcUnlink_args& operator=(const DataPageAccess_RpcUnlink_args&);
  DataPageAccess_RpcUnlink_args() : _path() {
  }

  virtual ~DataPageAccess_RpcUnlink_args() noexcept;
  _Path _path;

  _DataPageAccess_RpcUnlink_args__isset __isset;

  void __set__path(const _Path& val);

  bool operator == (const DataPageAccess_RpcUnlink_args & rhs) const
  {
    if (!(_path == rhs._path))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcUnlink_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcUnlink_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataPageAccess_RpcUnlink_pargs {
 public:


  virtual ~DataPageAccess_RpcUnlink_pargs() noexcept;
  const _Path* _path;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcUnlink_result__isset {
  _DataPageAccess_RpcUnlink_result__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcUnlink_result__isset;

class DataPageAccess_RpcUnlink_result {
 public:

  DataPageAccess_RpcUnlink_result(const DataPageAccess_RpcUnlink_result&);
  DataPageAccess_RpcUnlink_result& operator=(const DataPageAccess_RpcUnlink_result&);
  DataPageAccess_RpcUnlink_result() : success(0) {
  }

  virtual ~DataPageAccess_RpcUnlink_result() noexcept;
  int32_t success;

  _DataPageAccess_RpcUnlink_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const DataPageAccess_RpcUnlink_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcUnlink_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcUnlink_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcUnlink_presult__isset {
  _DataPageAccess_RpcUnlink_presult__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcUnlink_presult__isset;

class DataPageAccess_RpcUnlink_presult {
 public:


  virtual ~DataPageAccess_RpcUnlink_presult() noexcept;
  int32_t* success;

  _DataPageAccess_RpcUnlink_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataPageAccess_RpcFtruncate_args__isset {
  _DataPageAccess_RpcFtruncate_args__isset() : _fd(false), _offset(false) {}
  bool _fd :1;
  bool _offset :1;
} _DataPageAccess_RpcFtruncate_args__isset;

class DataPageAccess_RpcFtruncate_args {
 public:

  DataPageAccess_RpcFtruncate_args(const DataPageAccess_RpcFtruncate_args&);
  DataPageAccess_RpcFtruncate_args& operator=(const DataPageAccess_RpcFtruncate_args&);
  DataPageAccess_RpcFtruncate_args() : _fd(0), _offset(0) {
  }

  virtual ~DataPageAccess_RpcFtruncate_args() noexcept;
  _File _fd;
  _Off_t _offset;

  _DataPageAccess_RpcFtruncate_args__isset __isset;

  void __set__fd(const _File val);

  void __set__offset(const _Off_t val);

  bool operator == (const DataPageAccess_RpcFtruncate_args & rhs) const
  {
    if (!(_fd == rhs._fd))
      return false;
    if (!(_offset == rhs._offset))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcFtruncate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcFtruncate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataPageAccess_RpcFtruncate_pargs {
 public:


  virtual ~DataPageAccess_RpcFtruncate_pargs() noexcept;
  const _File* _fd;
  const _Off_t* _offset;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcFtruncate_result__isset {
  _DataPageAccess_RpcFtruncate_result__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcFtruncate_result__isset;

class DataPageAccess_RpcFtruncate_result {
 public:

  DataPageAccess_RpcFtruncate_result(const DataPageAccess_RpcFtruncate_result&);
  DataPageAccess_RpcFtruncate_result& operator=(const DataPageAccess_RpcFtruncate_result&);
  DataPageAccess_RpcFtruncate_result() : success(0) {
  }

  virtual ~DataPageAccess_RpcFtruncate_result() noexcept;
  int32_t success;

  _DataPageAccess_RpcFtruncate_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const DataPageAccess_RpcFtruncate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcFtruncate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcFtruncate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcFtruncate_presult__isset {
  _DataPageAccess_RpcFtruncate_presult__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcFtruncate_presult__isset;

class DataPageAccess_RpcFtruncate_presult {
 public:


  virtual ~DataPageAccess_RpcFtruncate_presult() noexcept;
  int32_t* success;

  _DataPageAccess_RpcFtruncate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataPageAccess_RpcInitFile_args__isset {
  _DataPageAccess_RpcInitFile_args__isset() : _path(false) {}
  bool _path :1;
} _DataPageAccess_RpcInitFile_args__isset;

class DataPageAccess_RpcInitFile_args {
 public:

  DataPageAccess_RpcInitFile_args(const DataPageAccess_RpcInitFile_args&);
  DataPageAccess_RpcInitFile_args& operator=(const DataPageAccess_RpcInitFile_args&);
  DataPageAccess_RpcInitFile_args() : _path() {
  }

  virtual ~DataPageAccess_RpcInitFile_args() noexcept;
  _Path _path;

  _DataPageAccess_RpcInitFile_args__isset __isset;

  void __set__path(const _Path& val);

  bool operator == (const DataPageAccess_RpcInitFile_args & rhs) const
  {
    if (!(_path == rhs._path))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcInitFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcInitFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataPageAccess_RpcInitFile_pargs {
 public:


  virtual ~DataPageAccess_RpcInitFile_pargs() noexcept;
  const _Path* _path;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcInitFile_result__isset {
  _DataPageAccess_RpcInitFile_result__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcInitFile_result__isset;

class DataPageAccess_RpcInitFile_result {
 public:

  DataPageAccess_RpcInitFile_result(const DataPageAccess_RpcInitFile_result&);
  DataPageAccess_RpcInitFile_result& operator=(const DataPageAccess_RpcInitFile_result&);
  DataPageAccess_RpcInitFile_result() : success() {
  }

  virtual ~DataPageAccess_RpcInitFile_result() noexcept;
  _Page success;

  _DataPageAccess_RpcInitFile_result__isset __isset;

  void __set_success(const _Page& val);

  bool operator == (const DataPageAccess_RpcInitFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcInitFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcInitFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcInitFile_presult__isset {
  _DataPageAccess_RpcInitFile_presult__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcInitFile_presult__isset;

class DataPageAccess_RpcInitFile_presult {
 public:


  virtual ~DataPageAccess_RpcInitFile_presult() noexcept;
  _Page* success;

  _DataPageAccess_RpcInitFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataPageAccess_RpcOpenTransientFile_args__isset {
  _DataPageAccess_RpcOpenTransientFile_args__isset() : _filename(false), _fileflags(false) {}
  bool _filename :1;
  bool _fileflags :1;
} _DataPageAccess_RpcOpenTransientFile_args__isset;

class DataPageAccess_RpcOpenTransientFile_args {
 public:

  DataPageAccess_RpcOpenTransientFile_args(const DataPageAccess_RpcOpenTransientFile_args&);
  DataPageAccess_RpcOpenTransientFile_args& operator=(const DataPageAccess_RpcOpenTransientFile_args&);
  DataPageAccess_RpcOpenTransientFile_args() : _filename(), _fileflags(0) {
  }

  virtual ~DataPageAccess_RpcOpenTransientFile_args() noexcept;
  _Path _filename;
  int32_t _fileflags;

  _DataPageAccess_RpcOpenTransientFile_args__isset __isset;

  void __set__filename(const _Path& val);

  void __set__fileflags(const int32_t val);

  bool operator == (const DataPageAccess_RpcOpenTransientFile_args & rhs) const
  {
    if (!(_filename == rhs._filename))
      return false;
    if (!(_fileflags == rhs._fileflags))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcOpenTransientFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcOpenTransientFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataPageAccess_RpcOpenTransientFile_pargs {
 public:


  virtual ~DataPageAccess_RpcOpenTransientFile_pargs() noexcept;
  const _Path* _filename;
  const int32_t* _fileflags;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcOpenTransientFile_result__isset {
  _DataPageAccess_RpcOpenTransientFile_result__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcOpenTransientFile_result__isset;

class DataPageAccess_RpcOpenTransientFile_result {
 public:

  DataPageAccess_RpcOpenTransientFile_result(const DataPageAccess_RpcOpenTransientFile_result&);
  DataPageAccess_RpcOpenTransientFile_result& operator=(const DataPageAccess_RpcOpenTransientFile_result&);
  DataPageAccess_RpcOpenTransientFile_result() : success(0) {
  }

  virtual ~DataPageAccess_RpcOpenTransientFile_result() noexcept;
  _File success;

  _DataPageAccess_RpcOpenTransientFile_result__isset __isset;

  void __set_success(const _File val);

  bool operator == (const DataPageAccess_RpcOpenTransientFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcOpenTransientFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcOpenTransientFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcOpenTransientFile_presult__isset {
  _DataPageAccess_RpcOpenTransientFile_presult__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcOpenTransientFile_presult__isset;

class DataPageAccess_RpcOpenTransientFile_presult {
 public:


  virtual ~DataPageAccess_RpcOpenTransientFile_presult() noexcept;
  _File* success;

  _DataPageAccess_RpcOpenTransientFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataPageAccess_RpcCloseTransientFile_args__isset {
  _DataPageAccess_RpcCloseTransientFile_args__isset() : _fd(false) {}
  bool _fd :1;
} _DataPageAccess_RpcCloseTransientFile_args__isset;

class DataPageAccess_RpcCloseTransientFile_args {
 public:

  DataPageAccess_RpcCloseTransientFile_args(const DataPageAccess_RpcCloseTransientFile_args&);
  DataPageAccess_RpcCloseTransientFile_args& operator=(const DataPageAccess_RpcCloseTransientFile_args&);
  DataPageAccess_RpcCloseTransientFile_args() : _fd(0) {
  }

  virtual ~DataPageAccess_RpcCloseTransientFile_args() noexcept;
  _File _fd;

  _DataPageAccess_RpcCloseTransientFile_args__isset __isset;

  void __set__fd(const _File val);

  bool operator == (const DataPageAccess_RpcCloseTransientFile_args & rhs) const
  {
    if (!(_fd == rhs._fd))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcCloseTransientFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcCloseTransientFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataPageAccess_RpcCloseTransientFile_pargs {
 public:


  virtual ~DataPageAccess_RpcCloseTransientFile_pargs() noexcept;
  const _File* _fd;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcCloseTransientFile_result__isset {
  _DataPageAccess_RpcCloseTransientFile_result__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcCloseTransientFile_result__isset;

class DataPageAccess_RpcCloseTransientFile_result {
 public:

  DataPageAccess_RpcCloseTransientFile_result(const DataPageAccess_RpcCloseTransientFile_result&);
  DataPageAccess_RpcCloseTransientFile_result& operator=(const DataPageAccess_RpcCloseTransientFile_result&);
  DataPageAccess_RpcCloseTransientFile_result() : success(0) {
  }

  virtual ~DataPageAccess_RpcCloseTransientFile_result() noexcept;
  int32_t success;

  _DataPageAccess_RpcCloseTransientFile_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const DataPageAccess_RpcCloseTransientFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcCloseTransientFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcCloseTransientFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcCloseTransientFile_presult__isset {
  _DataPageAccess_RpcCloseTransientFile_presult__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcCloseTransientFile_presult__isset;

class DataPageAccess_RpcCloseTransientFile_presult {
 public:


  virtual ~DataPageAccess_RpcCloseTransientFile_presult() noexcept;
  int32_t* success;

  _DataPageAccess_RpcCloseTransientFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataPageAccess_Rpcread_args__isset {
  _DataPageAccess_Rpcread_args__isset() : _fd(false), size(false) {}
  bool _fd :1;
  bool size :1;
} _DataPageAccess_Rpcread_args__isset;

class DataPageAccess_Rpcread_args {
 public:

  DataPageAccess_Rpcread_args(const DataPageAccess_Rpcread_args&);
  DataPageAccess_Rpcread_args& operator=(const DataPageAccess_Rpcread_args&);
  DataPageAccess_Rpcread_args() : _fd(0), size(0) {
  }

  virtual ~DataPageAccess_Rpcread_args() noexcept;
  _File _fd;
  int32_t size;

  _DataPageAccess_Rpcread_args__isset __isset;

  void __set__fd(const _File val);

  void __set_size(const int32_t val);

  bool operator == (const DataPageAccess_Rpcread_args & rhs) const
  {
    if (!(_fd == rhs._fd))
      return false;
    if (!(size == rhs.size))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_Rpcread_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_Rpcread_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataPageAccess_Rpcread_pargs {
 public:


  virtual ~DataPageAccess_Rpcread_pargs() noexcept;
  const _File* _fd;
  const int32_t* size;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_Rpcread_result__isset {
  _DataPageAccess_Rpcread_result__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_Rpcread_result__isset;

class DataPageAccess_Rpcread_result {
 public:

  DataPageAccess_Rpcread_result(const DataPageAccess_Rpcread_result&);
  DataPageAccess_Rpcread_result& operator=(const DataPageAccess_Rpcread_result&);
  DataPageAccess_Rpcread_result() : success() {
  }

  virtual ~DataPageAccess_Rpcread_result() noexcept;
  _Page success;

  _DataPageAccess_Rpcread_result__isset __isset;

  void __set_success(const _Page& val);

  bool operator == (const DataPageAccess_Rpcread_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_Rpcread_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_Rpcread_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_Rpcread_presult__isset {
  _DataPageAccess_Rpcread_presult__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_Rpcread_presult__isset;

class DataPageAccess_Rpcread_presult {
 public:


  virtual ~DataPageAccess_Rpcread_presult() noexcept;
  _Page* success;

  _DataPageAccess_Rpcread_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataPageAccess_Rpcwrite_args__isset {
  _DataPageAccess_Rpcwrite_args__isset() : _fd(false), _page(false), size(false) {}
  bool _fd :1;
  bool _page :1;
  bool size :1;
} _DataPageAccess_Rpcwrite_args__isset;

class DataPageAccess_Rpcwrite_args {
 public:

  DataPageAccess_Rpcwrite_args(const DataPageAccess_Rpcwrite_args&);
  DataPageAccess_Rpcwrite_args& operator=(const DataPageAccess_Rpcwrite_args&);
  DataPageAccess_Rpcwrite_args() : _fd(0), _page(), size(0) {
  }

  virtual ~DataPageAccess_Rpcwrite_args() noexcept;
  _File _fd;
  _Page _page;
  int32_t size;

  _DataPageAccess_Rpcwrite_args__isset __isset;

  void __set__fd(const _File val);

  void __set__page(const _Page& val);

  void __set_size(const int32_t val);

  bool operator == (const DataPageAccess_Rpcwrite_args & rhs) const
  {
    if (!(_fd == rhs._fd))
      return false;
    if (!(_page == rhs._page))
      return false;
    if (!(size == rhs.size))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_Rpcwrite_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_Rpcwrite_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataPageAccess_Rpcwrite_pargs {
 public:


  virtual ~DataPageAccess_Rpcwrite_pargs() noexcept;
  const _File* _fd;
  const _Page* _page;
  const int32_t* size;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_Rpcwrite_result__isset {
  _DataPageAccess_Rpcwrite_result__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_Rpcwrite_result__isset;

class DataPageAccess_Rpcwrite_result {
 public:

  DataPageAccess_Rpcwrite_result(const DataPageAccess_Rpcwrite_result&);
  DataPageAccess_Rpcwrite_result& operator=(const DataPageAccess_Rpcwrite_result&);
  DataPageAccess_Rpcwrite_result() : success(0) {
  }

  virtual ~DataPageAccess_Rpcwrite_result() noexcept;
  int32_t success;

  _DataPageAccess_Rpcwrite_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const DataPageAccess_Rpcwrite_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_Rpcwrite_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_Rpcwrite_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_Rpcwrite_presult__isset {
  _DataPageAccess_Rpcwrite_presult__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_Rpcwrite_presult__isset;

class DataPageAccess_Rpcwrite_presult {
 public:


  virtual ~DataPageAccess_Rpcwrite_presult() noexcept;
  int32_t* success;

  _DataPageAccess_Rpcwrite_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataPageAccess_RpcFileSync_args__isset {
  _DataPageAccess_RpcFileSync_args__isset() : _fd(false), _wait_event_info(false) {}
  bool _fd :1;
  bool _wait_event_info :1;
} _DataPageAccess_RpcFileSync_args__isset;

class DataPageAccess_RpcFileSync_args {
 public:

  DataPageAccess_RpcFileSync_args(const DataPageAccess_RpcFileSync_args&);
  DataPageAccess_RpcFileSync_args& operator=(const DataPageAccess_RpcFileSync_args&);
  DataPageAccess_RpcFileSync_args() : _fd(0), _wait_event_info(0) {
  }

  virtual ~DataPageAccess_RpcFileSync_args() noexcept;
  _File _fd;
  int32_t _wait_event_info;

  _DataPageAccess_RpcFileSync_args__isset __isset;

  void __set__fd(const _File val);

  void __set__wait_event_info(const int32_t val);

  bool operator == (const DataPageAccess_RpcFileSync_args & rhs) const
  {
    if (!(_fd == rhs._fd))
      return false;
    if (!(_wait_event_info == rhs._wait_event_info))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcFileSync_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcFileSync_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataPageAccess_RpcFileSync_pargs {
 public:


  virtual ~DataPageAccess_RpcFileSync_pargs() noexcept;
  const _File* _fd;
  const int32_t* _wait_event_info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcFileSync_result__isset {
  _DataPageAccess_RpcFileSync_result__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcFileSync_result__isset;

class DataPageAccess_RpcFileSync_result {
 public:

  DataPageAccess_RpcFileSync_result(const DataPageAccess_RpcFileSync_result&);
  DataPageAccess_RpcFileSync_result& operator=(const DataPageAccess_RpcFileSync_result&);
  DataPageAccess_RpcFileSync_result() : success(0) {
  }

  virtual ~DataPageAccess_RpcFileSync_result() noexcept;
  int32_t success;

  _DataPageAccess_RpcFileSync_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const DataPageAccess_RpcFileSync_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcFileSync_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcFileSync_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcFileSync_presult__isset {
  _DataPageAccess_RpcFileSync_presult__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcFileSync_presult__isset;

class DataPageAccess_RpcFileSync_presult {
 public:


  virtual ~DataPageAccess_RpcFileSync_presult() noexcept;
  int32_t* success;

  _DataPageAccess_RpcFileSync_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataPageAccess_RpcPgPRead_args__isset {
  _DataPageAccess_RpcPgPRead_args__isset() : _fd(false), _seg_bytes(false), _start_off(false) {}
  bool _fd :1;
  bool _seg_bytes :1;
  bool _start_off :1;
} _DataPageAccess_RpcPgPRead_args__isset;

class DataPageAccess_RpcPgPRead_args {
 public:

  DataPageAccess_RpcPgPRead_args(const DataPageAccess_RpcPgPRead_args&);
  DataPageAccess_RpcPgPRead_args& operator=(const DataPageAccess_RpcPgPRead_args&);
  DataPageAccess_RpcPgPRead_args() : _fd(0), _seg_bytes(0), _start_off(0) {
  }

  virtual ~DataPageAccess_RpcPgPRead_args() noexcept;
  _File _fd;
  int32_t _seg_bytes;
  _Off_t _start_off;

  _DataPageAccess_RpcPgPRead_args__isset __isset;

  void __set__fd(const _File val);

  void __set__seg_bytes(const int32_t val);

  void __set__start_off(const _Off_t val);

  bool operator == (const DataPageAccess_RpcPgPRead_args & rhs) const
  {
    if (!(_fd == rhs._fd))
      return false;
    if (!(_seg_bytes == rhs._seg_bytes))
      return false;
    if (!(_start_off == rhs._start_off))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcPgPRead_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcPgPRead_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataPageAccess_RpcPgPRead_pargs {
 public:


  virtual ~DataPageAccess_RpcPgPRead_pargs() noexcept;
  const _File* _fd;
  const int32_t* _seg_bytes;
  const _Off_t* _start_off;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcPgPRead_result__isset {
  _DataPageAccess_RpcPgPRead_result__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcPgPRead_result__isset;

class DataPageAccess_RpcPgPRead_result {
 public:

  DataPageAccess_RpcPgPRead_result(const DataPageAccess_RpcPgPRead_result&);
  DataPageAccess_RpcPgPRead_result& operator=(const DataPageAccess_RpcPgPRead_result&);
  DataPageAccess_RpcPgPRead_result() : success() {
  }

  virtual ~DataPageAccess_RpcPgPRead_result() noexcept;
  _Page success;

  _DataPageAccess_RpcPgPRead_result__isset __isset;

  void __set_success(const _Page& val);

  bool operator == (const DataPageAccess_RpcPgPRead_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcPgPRead_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcPgPRead_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcPgPRead_presult__isset {
  _DataPageAccess_RpcPgPRead_presult__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcPgPRead_presult__isset;

class DataPageAccess_RpcPgPRead_presult {
 public:


  virtual ~DataPageAccess_RpcPgPRead_presult() noexcept;
  _Page* success;

  _DataPageAccess_RpcPgPRead_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataPageAccess_RpcPgPWrite_args__isset {
  _DataPageAccess_RpcPgPWrite_args__isset() : _fd(false), _page(false), _amount(false), _offset(false) {}
  bool _fd :1;
  bool _page :1;
  bool _amount :1;
  bool _offset :1;
} _DataPageAccess_RpcPgPWrite_args__isset;

class DataPageAccess_RpcPgPWrite_args {
 public:

  DataPageAccess_RpcPgPWrite_args(const DataPageAccess_RpcPgPWrite_args&);
  DataPageAccess_RpcPgPWrite_args& operator=(const DataPageAccess_RpcPgPWrite_args&);
  DataPageAccess_RpcPgPWrite_args() : _fd(0), _page(), _amount(0), _offset(0) {
  }

  virtual ~DataPageAccess_RpcPgPWrite_args() noexcept;
  _File _fd;
  _Page _page;
  int32_t _amount;
  _Off_t _offset;

  _DataPageAccess_RpcPgPWrite_args__isset __isset;

  void __set__fd(const _File val);

  void __set__page(const _Page& val);

  void __set__amount(const int32_t val);

  void __set__offset(const _Off_t val);

  bool operator == (const DataPageAccess_RpcPgPWrite_args & rhs) const
  {
    if (!(_fd == rhs._fd))
      return false;
    if (!(_page == rhs._page))
      return false;
    if (!(_amount == rhs._amount))
      return false;
    if (!(_offset == rhs._offset))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcPgPWrite_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcPgPWrite_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataPageAccess_RpcPgPWrite_pargs {
 public:


  virtual ~DataPageAccess_RpcPgPWrite_pargs() noexcept;
  const _File* _fd;
  const _Page* _page;
  const int32_t* _amount;
  const _Off_t* _offset;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcPgPWrite_result__isset {
  _DataPageAccess_RpcPgPWrite_result__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcPgPWrite_result__isset;

class DataPageAccess_RpcPgPWrite_result {
 public:

  DataPageAccess_RpcPgPWrite_result(const DataPageAccess_RpcPgPWrite_result&);
  DataPageAccess_RpcPgPWrite_result& operator=(const DataPageAccess_RpcPgPWrite_result&);
  DataPageAccess_RpcPgPWrite_result() : success(0) {
  }

  virtual ~DataPageAccess_RpcPgPWrite_result() noexcept;
  int32_t success;

  _DataPageAccess_RpcPgPWrite_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const DataPageAccess_RpcPgPWrite_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcPgPWrite_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcPgPWrite_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcPgPWrite_presult__isset {
  _DataPageAccess_RpcPgPWrite_presult__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcPgPWrite_presult__isset;

class DataPageAccess_RpcPgPWrite_presult {
 public:


  virtual ~DataPageAccess_RpcPgPWrite_presult() noexcept;
  int32_t* success;

  _DataPageAccess_RpcPgPWrite_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataPageAccess_RpcClose_args__isset {
  _DataPageAccess_RpcClose_args__isset() : _fd(false) {}
  bool _fd :1;
} _DataPageAccess_RpcClose_args__isset;

class DataPageAccess_RpcClose_args {
 public:

  DataPageAccess_RpcClose_args(const DataPageAccess_RpcClose_args&);
  DataPageAccess_RpcClose_args& operator=(const DataPageAccess_RpcClose_args&);
  DataPageAccess_RpcClose_args() : _fd(0) {
  }

  virtual ~DataPageAccess_RpcClose_args() noexcept;
  _File _fd;

  _DataPageAccess_RpcClose_args__isset __isset;

  void __set__fd(const _File val);

  bool operator == (const DataPageAccess_RpcClose_args & rhs) const
  {
    if (!(_fd == rhs._fd))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcClose_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcClose_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataPageAccess_RpcClose_pargs {
 public:


  virtual ~DataPageAccess_RpcClose_pargs() noexcept;
  const _File* _fd;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcClose_result__isset {
  _DataPageAccess_RpcClose_result__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcClose_result__isset;

class DataPageAccess_RpcClose_result {
 public:

  DataPageAccess_RpcClose_result(const DataPageAccess_RpcClose_result&);
  DataPageAccess_RpcClose_result& operator=(const DataPageAccess_RpcClose_result&);
  DataPageAccess_RpcClose_result() : success(0) {
  }

  virtual ~DataPageAccess_RpcClose_result() noexcept;
  int32_t success;

  _DataPageAccess_RpcClose_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const DataPageAccess_RpcClose_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcClose_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcClose_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcClose_presult__isset {
  _DataPageAccess_RpcClose_presult__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcClose_presult__isset;

class DataPageAccess_RpcClose_presult {
 public:


  virtual ~DataPageAccess_RpcClose_presult() noexcept;
  int32_t* success;

  _DataPageAccess_RpcClose_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataPageAccess_RpcBasicOpenFile_args__isset {
  _DataPageAccess_RpcBasicOpenFile_args__isset() : _path(false), _flags(false) {}
  bool _path :1;
  bool _flags :1;
} _DataPageAccess_RpcBasicOpenFile_args__isset;

class DataPageAccess_RpcBasicOpenFile_args {
 public:

  DataPageAccess_RpcBasicOpenFile_args(const DataPageAccess_RpcBasicOpenFile_args&);
  DataPageAccess_RpcBasicOpenFile_args& operator=(const DataPageAccess_RpcBasicOpenFile_args&);
  DataPageAccess_RpcBasicOpenFile_args() : _path(), _flags(0) {
  }

  virtual ~DataPageAccess_RpcBasicOpenFile_args() noexcept;
  _Path _path;
  int32_t _flags;

  _DataPageAccess_RpcBasicOpenFile_args__isset __isset;

  void __set__path(const _Path& val);

  void __set__flags(const int32_t val);

  bool operator == (const DataPageAccess_RpcBasicOpenFile_args & rhs) const
  {
    if (!(_path == rhs._path))
      return false;
    if (!(_flags == rhs._flags))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcBasicOpenFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcBasicOpenFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataPageAccess_RpcBasicOpenFile_pargs {
 public:


  virtual ~DataPageAccess_RpcBasicOpenFile_pargs() noexcept;
  const _Path* _path;
  const int32_t* _flags;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcBasicOpenFile_result__isset {
  _DataPageAccess_RpcBasicOpenFile_result__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcBasicOpenFile_result__isset;

class DataPageAccess_RpcBasicOpenFile_result {
 public:

  DataPageAccess_RpcBasicOpenFile_result(const DataPageAccess_RpcBasicOpenFile_result&);
  DataPageAccess_RpcBasicOpenFile_result& operator=(const DataPageAccess_RpcBasicOpenFile_result&);
  DataPageAccess_RpcBasicOpenFile_result() : success(0) {
  }

  virtual ~DataPageAccess_RpcBasicOpenFile_result() noexcept;
  int32_t success;

  _DataPageAccess_RpcBasicOpenFile_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const DataPageAccess_RpcBasicOpenFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcBasicOpenFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcBasicOpenFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcBasicOpenFile_presult__isset {
  _DataPageAccess_RpcBasicOpenFile_presult__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcBasicOpenFile_presult__isset;

class DataPageAccess_RpcBasicOpenFile_presult {
 public:


  virtual ~DataPageAccess_RpcBasicOpenFile_presult() noexcept;
  int32_t* success;

  _DataPageAccess_RpcBasicOpenFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataPageAccess_RpcPgFdatasync_args__isset {
  _DataPageAccess_RpcPgFdatasync_args__isset() : _fd(false) {}
  bool _fd :1;
} _DataPageAccess_RpcPgFdatasync_args__isset;

class DataPageAccess_RpcPgFdatasync_args {
 public:

  DataPageAccess_RpcPgFdatasync_args(const DataPageAccess_RpcPgFdatasync_args&);
  DataPageAccess_RpcPgFdatasync_args& operator=(const DataPageAccess_RpcPgFdatasync_args&);
  DataPageAccess_RpcPgFdatasync_args() : _fd(0) {
  }

  virtual ~DataPageAccess_RpcPgFdatasync_args() noexcept;
  _File _fd;

  _DataPageAccess_RpcPgFdatasync_args__isset __isset;

  void __set__fd(const _File val);

  bool operator == (const DataPageAccess_RpcPgFdatasync_args & rhs) const
  {
    if (!(_fd == rhs._fd))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcPgFdatasync_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcPgFdatasync_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataPageAccess_RpcPgFdatasync_pargs {
 public:


  virtual ~DataPageAccess_RpcPgFdatasync_pargs() noexcept;
  const _File* _fd;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcPgFdatasync_result__isset {
  _DataPageAccess_RpcPgFdatasync_result__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcPgFdatasync_result__isset;

class DataPageAccess_RpcPgFdatasync_result {
 public:

  DataPageAccess_RpcPgFdatasync_result(const DataPageAccess_RpcPgFdatasync_result&);
  DataPageAccess_RpcPgFdatasync_result& operator=(const DataPageAccess_RpcPgFdatasync_result&);
  DataPageAccess_RpcPgFdatasync_result() : success(0) {
  }

  virtual ~DataPageAccess_RpcPgFdatasync_result() noexcept;
  int32_t success;

  _DataPageAccess_RpcPgFdatasync_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const DataPageAccess_RpcPgFdatasync_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcPgFdatasync_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcPgFdatasync_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcPgFdatasync_presult__isset {
  _DataPageAccess_RpcPgFdatasync_presult__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcPgFdatasync_presult__isset;

class DataPageAccess_RpcPgFdatasync_presult {
 public:


  virtual ~DataPageAccess_RpcPgFdatasync_presult() noexcept;
  int32_t* success;

  _DataPageAccess_RpcPgFdatasync_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataPageAccess_RpcPgFsyncNoWritethrough_args__isset {
  _DataPageAccess_RpcPgFsyncNoWritethrough_args__isset() : _fd(false) {}
  bool _fd :1;
} _DataPageAccess_RpcPgFsyncNoWritethrough_args__isset;

class DataPageAccess_RpcPgFsyncNoWritethrough_args {
 public:

  DataPageAccess_RpcPgFsyncNoWritethrough_args(const DataPageAccess_RpcPgFsyncNoWritethrough_args&);
  DataPageAccess_RpcPgFsyncNoWritethrough_args& operator=(const DataPageAccess_RpcPgFsyncNoWritethrough_args&);
  DataPageAccess_RpcPgFsyncNoWritethrough_args() : _fd(0) {
  }

  virtual ~DataPageAccess_RpcPgFsyncNoWritethrough_args() noexcept;
  _File _fd;

  _DataPageAccess_RpcPgFsyncNoWritethrough_args__isset __isset;

  void __set__fd(const _File val);

  bool operator == (const DataPageAccess_RpcPgFsyncNoWritethrough_args & rhs) const
  {
    if (!(_fd == rhs._fd))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcPgFsyncNoWritethrough_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcPgFsyncNoWritethrough_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataPageAccess_RpcPgFsyncNoWritethrough_pargs {
 public:


  virtual ~DataPageAccess_RpcPgFsyncNoWritethrough_pargs() noexcept;
  const _File* _fd;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcPgFsyncNoWritethrough_result__isset {
  _DataPageAccess_RpcPgFsyncNoWritethrough_result__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcPgFsyncNoWritethrough_result__isset;

class DataPageAccess_RpcPgFsyncNoWritethrough_result {
 public:

  DataPageAccess_RpcPgFsyncNoWritethrough_result(const DataPageAccess_RpcPgFsyncNoWritethrough_result&);
  DataPageAccess_RpcPgFsyncNoWritethrough_result& operator=(const DataPageAccess_RpcPgFsyncNoWritethrough_result&);
  DataPageAccess_RpcPgFsyncNoWritethrough_result() : success(0) {
  }

  virtual ~DataPageAccess_RpcPgFsyncNoWritethrough_result() noexcept;
  int32_t success;

  _DataPageAccess_RpcPgFsyncNoWritethrough_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const DataPageAccess_RpcPgFsyncNoWritethrough_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcPgFsyncNoWritethrough_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcPgFsyncNoWritethrough_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcPgFsyncNoWritethrough_presult__isset {
  _DataPageAccess_RpcPgFsyncNoWritethrough_presult__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcPgFsyncNoWritethrough_presult__isset;

class DataPageAccess_RpcPgFsyncNoWritethrough_presult {
 public:


  virtual ~DataPageAccess_RpcPgFsyncNoWritethrough_presult() noexcept;
  int32_t* success;

  _DataPageAccess_RpcPgFsyncNoWritethrough_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataPageAccess_RpcLseek_args__isset {
  _DataPageAccess_RpcLseek_args__isset() : _fd(false), _offset(false), _flag(false) {}
  bool _fd :1;
  bool _offset :1;
  bool _flag :1;
} _DataPageAccess_RpcLseek_args__isset;

class DataPageAccess_RpcLseek_args {
 public:

  DataPageAccess_RpcLseek_args(const DataPageAccess_RpcLseek_args&);
  DataPageAccess_RpcLseek_args& operator=(const DataPageAccess_RpcLseek_args&);
  DataPageAccess_RpcLseek_args() : _fd(0), _offset(0), _flag(0) {
  }

  virtual ~DataPageAccess_RpcLseek_args() noexcept;
  int32_t _fd;
  _Off_t _offset;
  int32_t _flag;

  _DataPageAccess_RpcLseek_args__isset __isset;

  void __set__fd(const int32_t val);

  void __set__offset(const _Off_t val);

  void __set__flag(const int32_t val);

  bool operator == (const DataPageAccess_RpcLseek_args & rhs) const
  {
    if (!(_fd == rhs._fd))
      return false;
    if (!(_offset == rhs._offset))
      return false;
    if (!(_flag == rhs._flag))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcLseek_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcLseek_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataPageAccess_RpcLseek_pargs {
 public:


  virtual ~DataPageAccess_RpcLseek_pargs() noexcept;
  const int32_t* _fd;
  const _Off_t* _offset;
  const int32_t* _flag;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcLseek_result__isset {
  _DataPageAccess_RpcLseek_result__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcLseek_result__isset;

class DataPageAccess_RpcLseek_result {
 public:

  DataPageAccess_RpcLseek_result(const DataPageAccess_RpcLseek_result&);
  DataPageAccess_RpcLseek_result& operator=(const DataPageAccess_RpcLseek_result&);
  DataPageAccess_RpcLseek_result() : success(0) {
  }

  virtual ~DataPageAccess_RpcLseek_result() noexcept;
  int32_t success;

  _DataPageAccess_RpcLseek_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const DataPageAccess_RpcLseek_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcLseek_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcLseek_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcLseek_presult__isset {
  _DataPageAccess_RpcLseek_presult__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcLseek_presult__isset;

class DataPageAccess_RpcLseek_presult {
 public:


  virtual ~DataPageAccess_RpcLseek_presult() noexcept;
  int32_t* success;

  _DataPageAccess_RpcLseek_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataPageAccess_RpcStat_args__isset {
  _DataPageAccess_RpcStat_args__isset() : _path(false) {}
  bool _path :1;
} _DataPageAccess_RpcStat_args__isset;

class DataPageAccess_RpcStat_args {
 public:

  DataPageAccess_RpcStat_args(const DataPageAccess_RpcStat_args&);
  DataPageAccess_RpcStat_args& operator=(const DataPageAccess_RpcStat_args&);
  DataPageAccess_RpcStat_args() : _path() {
  }

  virtual ~DataPageAccess_RpcStat_args() noexcept;
  _Path _path;

  _DataPageAccess_RpcStat_args__isset __isset;

  void __set__path(const _Path& val);

  bool operator == (const DataPageAccess_RpcStat_args & rhs) const
  {
    if (!(_path == rhs._path))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcStat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcStat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataPageAccess_RpcStat_pargs {
 public:


  virtual ~DataPageAccess_RpcStat_pargs() noexcept;
  const _Path* _path;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcStat_result__isset {
  _DataPageAccess_RpcStat_result__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcStat_result__isset;

class DataPageAccess_RpcStat_result {
 public:

  DataPageAccess_RpcStat_result(const DataPageAccess_RpcStat_result&);
  DataPageAccess_RpcStat_result& operator=(const DataPageAccess_RpcStat_result&);
  DataPageAccess_RpcStat_result() {
  }

  virtual ~DataPageAccess_RpcStat_result() noexcept;
  _Stat_Resp success;

  _DataPageAccess_RpcStat_result__isset __isset;

  void __set_success(const _Stat_Resp& val);

  bool operator == (const DataPageAccess_RpcStat_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcStat_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcStat_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcStat_presult__isset {
  _DataPageAccess_RpcStat_presult__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcStat_presult__isset;

class DataPageAccess_RpcStat_presult {
 public:


  virtual ~DataPageAccess_RpcStat_presult() noexcept;
  _Stat_Resp* success;

  _DataPageAccess_RpcStat_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataPageAccess_RpcDirectoryIsEmpty_args__isset {
  _DataPageAccess_RpcDirectoryIsEmpty_args__isset() : _path(false) {}
  bool _path :1;
} _DataPageAccess_RpcDirectoryIsEmpty_args__isset;

class DataPageAccess_RpcDirectoryIsEmpty_args {
 public:

  DataPageAccess_RpcDirectoryIsEmpty_args(const DataPageAccess_RpcDirectoryIsEmpty_args&);
  DataPageAccess_RpcDirectoryIsEmpty_args& operator=(const DataPageAccess_RpcDirectoryIsEmpty_args&);
  DataPageAccess_RpcDirectoryIsEmpty_args() : _path() {
  }

  virtual ~DataPageAccess_RpcDirectoryIsEmpty_args() noexcept;
  _Path _path;

  _DataPageAccess_RpcDirectoryIsEmpty_args__isset __isset;

  void __set__path(const _Path& val);

  bool operator == (const DataPageAccess_RpcDirectoryIsEmpty_args & rhs) const
  {
    if (!(_path == rhs._path))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcDirectoryIsEmpty_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcDirectoryIsEmpty_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataPageAccess_RpcDirectoryIsEmpty_pargs {
 public:


  virtual ~DataPageAccess_RpcDirectoryIsEmpty_pargs() noexcept;
  const _Path* _path;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcDirectoryIsEmpty_result__isset {
  _DataPageAccess_RpcDirectoryIsEmpty_result__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcDirectoryIsEmpty_result__isset;

class DataPageAccess_RpcDirectoryIsEmpty_result {
 public:

  DataPageAccess_RpcDirectoryIsEmpty_result(const DataPageAccess_RpcDirectoryIsEmpty_result&);
  DataPageAccess_RpcDirectoryIsEmpty_result& operator=(const DataPageAccess_RpcDirectoryIsEmpty_result&);
  DataPageAccess_RpcDirectoryIsEmpty_result() : success(0) {
  }

  virtual ~DataPageAccess_RpcDirectoryIsEmpty_result() noexcept;
  int32_t success;

  _DataPageAccess_RpcDirectoryIsEmpty_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const DataPageAccess_RpcDirectoryIsEmpty_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcDirectoryIsEmpty_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcDirectoryIsEmpty_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcDirectoryIsEmpty_presult__isset {
  _DataPageAccess_RpcDirectoryIsEmpty_presult__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcDirectoryIsEmpty_presult__isset;

class DataPageAccess_RpcDirectoryIsEmpty_presult {
 public:


  virtual ~DataPageAccess_RpcDirectoryIsEmpty_presult() noexcept;
  int32_t* success;

  _DataPageAccess_RpcDirectoryIsEmpty_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataPageAccess_RpcCopyDir_args__isset {
  _DataPageAccess_RpcCopyDir_args__isset() : _src(false), _dst(false) {}
  bool _src :1;
  bool _dst :1;
} _DataPageAccess_RpcCopyDir_args__isset;

class DataPageAccess_RpcCopyDir_args {
 public:

  DataPageAccess_RpcCopyDir_args(const DataPageAccess_RpcCopyDir_args&);
  DataPageAccess_RpcCopyDir_args& operator=(const DataPageAccess_RpcCopyDir_args&);
  DataPageAccess_RpcCopyDir_args() : _src(), _dst() {
  }

  virtual ~DataPageAccess_RpcCopyDir_args() noexcept;
  _Path _src;
  _Path _dst;

  _DataPageAccess_RpcCopyDir_args__isset __isset;

  void __set__src(const _Path& val);

  void __set__dst(const _Path& val);

  bool operator == (const DataPageAccess_RpcCopyDir_args & rhs) const
  {
    if (!(_src == rhs._src))
      return false;
    if (!(_dst == rhs._dst))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcCopyDir_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcCopyDir_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataPageAccess_RpcCopyDir_pargs {
 public:


  virtual ~DataPageAccess_RpcCopyDir_pargs() noexcept;
  const _Path* _src;
  const _Path* _dst;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcCopyDir_result__isset {
  _DataPageAccess_RpcCopyDir_result__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcCopyDir_result__isset;

class DataPageAccess_RpcCopyDir_result {
 public:

  DataPageAccess_RpcCopyDir_result(const DataPageAccess_RpcCopyDir_result&);
  DataPageAccess_RpcCopyDir_result& operator=(const DataPageAccess_RpcCopyDir_result&);
  DataPageAccess_RpcCopyDir_result() : success(0) {
  }

  virtual ~DataPageAccess_RpcCopyDir_result() noexcept;
  int32_t success;

  _DataPageAccess_RpcCopyDir_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const DataPageAccess_RpcCopyDir_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcCopyDir_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcCopyDir_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcCopyDir_presult__isset {
  _DataPageAccess_RpcCopyDir_presult__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcCopyDir_presult__isset;

class DataPageAccess_RpcCopyDir_presult {
 public:


  virtual ~DataPageAccess_RpcCopyDir_presult() noexcept;
  int32_t* success;

  _DataPageAccess_RpcCopyDir_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataPageAccess_RpcPgFsync_args__isset {
  _DataPageAccess_RpcPgFsync_args__isset() : _fd(false) {}
  bool _fd :1;
} _DataPageAccess_RpcPgFsync_args__isset;

class DataPageAccess_RpcPgFsync_args {
 public:

  DataPageAccess_RpcPgFsync_args(const DataPageAccess_RpcPgFsync_args&);
  DataPageAccess_RpcPgFsync_args& operator=(const DataPageAccess_RpcPgFsync_args&);
  DataPageAccess_RpcPgFsync_args() : _fd(0) {
  }

  virtual ~DataPageAccess_RpcPgFsync_args() noexcept;
  int32_t _fd;

  _DataPageAccess_RpcPgFsync_args__isset __isset;

  void __set__fd(const int32_t val);

  bool operator == (const DataPageAccess_RpcPgFsync_args & rhs) const
  {
    if (!(_fd == rhs._fd))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcPgFsync_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcPgFsync_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataPageAccess_RpcPgFsync_pargs {
 public:


  virtual ~DataPageAccess_RpcPgFsync_pargs() noexcept;
  const int32_t* _fd;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcPgFsync_result__isset {
  _DataPageAccess_RpcPgFsync_result__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcPgFsync_result__isset;

class DataPageAccess_RpcPgFsync_result {
 public:

  DataPageAccess_RpcPgFsync_result(const DataPageAccess_RpcPgFsync_result&);
  DataPageAccess_RpcPgFsync_result& operator=(const DataPageAccess_RpcPgFsync_result&);
  DataPageAccess_RpcPgFsync_result() : success(0) {
  }

  virtual ~DataPageAccess_RpcPgFsync_result() noexcept;
  int32_t success;

  _DataPageAccess_RpcPgFsync_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const DataPageAccess_RpcPgFsync_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcPgFsync_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcPgFsync_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcPgFsync_presult__isset {
  _DataPageAccess_RpcPgFsync_presult__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcPgFsync_presult__isset;

class DataPageAccess_RpcPgFsync_presult {
 public:


  virtual ~DataPageAccess_RpcPgFsync_presult() noexcept;
  int32_t* success;

  _DataPageAccess_RpcPgFsync_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataPageAccess_RpcDurableUnlink_args__isset {
  _DataPageAccess_RpcDurableUnlink_args__isset() : _fname(false), _flag(false) {}
  bool _fname :1;
  bool _flag :1;
} _DataPageAccess_RpcDurableUnlink_args__isset;

class DataPageAccess_RpcDurableUnlink_args {
 public:

  DataPageAccess_RpcDurableUnlink_args(const DataPageAccess_RpcDurableUnlink_args&);
  DataPageAccess_RpcDurableUnlink_args& operator=(const DataPageAccess_RpcDurableUnlink_args&);
  DataPageAccess_RpcDurableUnlink_args() : _fname(), _flag(0) {
  }

  virtual ~DataPageAccess_RpcDurableUnlink_args() noexcept;
  _Path _fname;
  int32_t _flag;

  _DataPageAccess_RpcDurableUnlink_args__isset __isset;

  void __set__fname(const _Path& val);

  void __set__flag(const int32_t val);

  bool operator == (const DataPageAccess_RpcDurableUnlink_args & rhs) const
  {
    if (!(_fname == rhs._fname))
      return false;
    if (!(_flag == rhs._flag))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcDurableUnlink_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcDurableUnlink_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataPageAccess_RpcDurableUnlink_pargs {
 public:


  virtual ~DataPageAccess_RpcDurableUnlink_pargs() noexcept;
  const _Path* _fname;
  const int32_t* _flag;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcDurableUnlink_result__isset {
  _DataPageAccess_RpcDurableUnlink_result__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcDurableUnlink_result__isset;

class DataPageAccess_RpcDurableUnlink_result {
 public:

  DataPageAccess_RpcDurableUnlink_result(const DataPageAccess_RpcDurableUnlink_result&);
  DataPageAccess_RpcDurableUnlink_result& operator=(const DataPageAccess_RpcDurableUnlink_result&);
  DataPageAccess_RpcDurableUnlink_result() : success(0) {
  }

  virtual ~DataPageAccess_RpcDurableUnlink_result() noexcept;
  int32_t success;

  _DataPageAccess_RpcDurableUnlink_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const DataPageAccess_RpcDurableUnlink_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcDurableUnlink_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcDurableUnlink_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcDurableUnlink_presult__isset {
  _DataPageAccess_RpcDurableUnlink_presult__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcDurableUnlink_presult__isset;

class DataPageAccess_RpcDurableUnlink_presult {
 public:


  virtual ~DataPageAccess_RpcDurableUnlink_presult() noexcept;
  int32_t* success;

  _DataPageAccess_RpcDurableUnlink_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataPageAccess_RpcDurableRenameExcl_args__isset {
  _DataPageAccess_RpcDurableRenameExcl_args__isset() : _oldFname(false), _newFname(false), _elevel(false) {}
  bool _oldFname :1;
  bool _newFname :1;
  bool _elevel :1;
} _DataPageAccess_RpcDurableRenameExcl_args__isset;

class DataPageAccess_RpcDurableRenameExcl_args {
 public:

  DataPageAccess_RpcDurableRenameExcl_args(const DataPageAccess_RpcDurableRenameExcl_args&);
  DataPageAccess_RpcDurableRenameExcl_args& operator=(const DataPageAccess_RpcDurableRenameExcl_args&);
  DataPageAccess_RpcDurableRenameExcl_args() : _oldFname(), _newFname(), _elevel(0) {
  }

  virtual ~DataPageAccess_RpcDurableRenameExcl_args() noexcept;
  _Path _oldFname;
  _Path _newFname;
  int32_t _elevel;

  _DataPageAccess_RpcDurableRenameExcl_args__isset __isset;

  void __set__oldFname(const _Path& val);

  void __set__newFname(const _Path& val);

  void __set__elevel(const int32_t val);

  bool operator == (const DataPageAccess_RpcDurableRenameExcl_args & rhs) const
  {
    if (!(_oldFname == rhs._oldFname))
      return false;
    if (!(_newFname == rhs._newFname))
      return false;
    if (!(_elevel == rhs._elevel))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcDurableRenameExcl_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcDurableRenameExcl_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataPageAccess_RpcDurableRenameExcl_pargs {
 public:


  virtual ~DataPageAccess_RpcDurableRenameExcl_pargs() noexcept;
  const _Path* _oldFname;
  const _Path* _newFname;
  const int32_t* _elevel;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcDurableRenameExcl_result__isset {
  _DataPageAccess_RpcDurableRenameExcl_result__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcDurableRenameExcl_result__isset;

class DataPageAccess_RpcDurableRenameExcl_result {
 public:

  DataPageAccess_RpcDurableRenameExcl_result(const DataPageAccess_RpcDurableRenameExcl_result&);
  DataPageAccess_RpcDurableRenameExcl_result& operator=(const DataPageAccess_RpcDurableRenameExcl_result&);
  DataPageAccess_RpcDurableRenameExcl_result() : success(0) {
  }

  virtual ~DataPageAccess_RpcDurableRenameExcl_result() noexcept;
  int32_t success;

  _DataPageAccess_RpcDurableRenameExcl_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const DataPageAccess_RpcDurableRenameExcl_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcDurableRenameExcl_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcDurableRenameExcl_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcDurableRenameExcl_presult__isset {
  _DataPageAccess_RpcDurableRenameExcl_presult__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcDurableRenameExcl_presult__isset;

class DataPageAccess_RpcDurableRenameExcl_presult {
 public:


  virtual ~DataPageAccess_RpcDurableRenameExcl_presult() noexcept;
  int32_t* success;

  _DataPageAccess_RpcDurableRenameExcl_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataPageAccess_RpcXLogWrite_args__isset {
  _DataPageAccess_RpcXLogWrite_args__isset() : _fd(false), _page(false), _amount(false), _offset(false), _xlblocks(false), _blknum(false), _idx(false), _lsn(false) {}
  bool _fd :1;
  bool _page :1;
  bool _amount :1;
  bool _offset :1;
  bool _xlblocks :1;
  bool _blknum :1;
  bool _idx :1;
  bool _lsn :1;
} _DataPageAccess_RpcXLogWrite_args__isset;

class DataPageAccess_RpcXLogWrite_args {
 public:

  DataPageAccess_RpcXLogWrite_args(const DataPageAccess_RpcXLogWrite_args&);
  DataPageAccess_RpcXLogWrite_args& operator=(const DataPageAccess_RpcXLogWrite_args&);
  DataPageAccess_RpcXLogWrite_args() : _fd(0), _page(), _amount(0), _offset(0), _blknum(0), _idx(0), _lsn(0) {
  }

  virtual ~DataPageAccess_RpcXLogWrite_args() noexcept;
  _File _fd;
  _Page _page;
  int32_t _amount;
  _Off_t _offset;
  std::vector<int64_t>  _xlblocks;
  int32_t _blknum;
  int32_t _idx;
  int64_t _lsn;

  _DataPageAccess_RpcXLogWrite_args__isset __isset;

  void __set__fd(const _File val);

  void __set__page(const _Page& val);

  void __set__amount(const int32_t val);

  void __set__offset(const _Off_t val);

  void __set__xlblocks(const std::vector<int64_t> & val);

  void __set__blknum(const int32_t val);

  void __set__idx(const int32_t val);

  void __set__lsn(const int64_t val);

  bool operator == (const DataPageAccess_RpcXLogWrite_args & rhs) const
  {
    if (!(_fd == rhs._fd))
      return false;
    if (!(_page == rhs._page))
      return false;
    if (!(_amount == rhs._amount))
      return false;
    if (!(_offset == rhs._offset))
      return false;
    if (!(_xlblocks == rhs._xlblocks))
      return false;
    if (!(_blknum == rhs._blknum))
      return false;
    if (!(_idx == rhs._idx))
      return false;
    if (!(_lsn == rhs._lsn))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcXLogWrite_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcXLogWrite_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataPageAccess_RpcXLogWrite_pargs {
 public:


  virtual ~DataPageAccess_RpcXLogWrite_pargs() noexcept;
  const _File* _fd;
  const _Page* _page;
  const int32_t* _amount;
  const _Off_t* _offset;
  const std::vector<int64_t> * _xlblocks;
  const int32_t* _blknum;
  const int32_t* _idx;
  const int64_t* _lsn;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcXLogWrite_result__isset {
  _DataPageAccess_RpcXLogWrite_result__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcXLogWrite_result__isset;

class DataPageAccess_RpcXLogWrite_result {
 public:

  DataPageAccess_RpcXLogWrite_result(const DataPageAccess_RpcXLogWrite_result&);
  DataPageAccess_RpcXLogWrite_result& operator=(const DataPageAccess_RpcXLogWrite_result&);
  DataPageAccess_RpcXLogWrite_result() : success(0) {
  }

  virtual ~DataPageAccess_RpcXLogWrite_result() noexcept;
  int32_t success;

  _DataPageAccess_RpcXLogWrite_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const DataPageAccess_RpcXLogWrite_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcXLogWrite_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcXLogWrite_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcXLogWrite_presult__isset {
  _DataPageAccess_RpcXLogWrite_presult__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcXLogWrite_presult__isset;

class DataPageAccess_RpcXLogWrite_presult {
 public:


  virtual ~DataPageAccess_RpcXLogWrite_presult() noexcept;
  int32_t* success;

  _DataPageAccess_RpcXLogWrite_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataPageAccess_RpcXLogFileInit_args__isset {
  _DataPageAccess_RpcXLogFileInit_args__isset() : _logsegno(false), _use_existent(false), _use_lock(false) {}
  bool _logsegno :1;
  bool _use_existent :1;
  bool _use_lock :1;
} _DataPageAccess_RpcXLogFileInit_args__isset;

class DataPageAccess_RpcXLogFileInit_args {
 public:

  DataPageAccess_RpcXLogFileInit_args(const DataPageAccess_RpcXLogFileInit_args&);
  DataPageAccess_RpcXLogFileInit_args& operator=(const DataPageAccess_RpcXLogFileInit_args&);
  DataPageAccess_RpcXLogFileInit_args() : _logsegno(0), _use_existent(0), _use_lock(0) {
  }

  virtual ~DataPageAccess_RpcXLogFileInit_args() noexcept;
  int64_t _logsegno;
  int32_t _use_existent;
  int32_t _use_lock;

  _DataPageAccess_RpcXLogFileInit_args__isset __isset;

  void __set__logsegno(const int64_t val);

  void __set__use_existent(const int32_t val);

  void __set__use_lock(const int32_t val);

  bool operator == (const DataPageAccess_RpcXLogFileInit_args & rhs) const
  {
    if (!(_logsegno == rhs._logsegno))
      return false;
    if (!(_use_existent == rhs._use_existent))
      return false;
    if (!(_use_lock == rhs._use_lock))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcXLogFileInit_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcXLogFileInit_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataPageAccess_RpcXLogFileInit_pargs {
 public:


  virtual ~DataPageAccess_RpcXLogFileInit_pargs() noexcept;
  const int64_t* _logsegno;
  const int32_t* _use_existent;
  const int32_t* _use_lock;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcXLogFileInit_result__isset {
  _DataPageAccess_RpcXLogFileInit_result__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcXLogFileInit_result__isset;

class DataPageAccess_RpcXLogFileInit_result {
 public:

  DataPageAccess_RpcXLogFileInit_result(const DataPageAccess_RpcXLogFileInit_result&);
  DataPageAccess_RpcXLogFileInit_result& operator=(const DataPageAccess_RpcXLogFileInit_result&);
  DataPageAccess_RpcXLogFileInit_result() {
  }

  virtual ~DataPageAccess_RpcXLogFileInit_result() noexcept;
  _XLog_Init_File_Resp success;

  _DataPageAccess_RpcXLogFileInit_result__isset __isset;

  void __set_success(const _XLog_Init_File_Resp& val);

  bool operator == (const DataPageAccess_RpcXLogFileInit_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataPageAccess_RpcXLogFileInit_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_RpcXLogFileInit_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataPageAccess_RpcXLogFileInit_presult__isset {
  _DataPageAccess_RpcXLogFileInit_presult__isset() : success(false) {}
  bool success :1;
} _DataPageAccess_RpcXLogFileInit_presult__isset;

class DataPageAccess_RpcXLogFileInit_presult {
 public:


  virtual ~DataPageAccess_RpcXLogFileInit_presult() noexcept;
  _XLog_Init_File_Resp* success;

  _DataPageAccess_RpcXLogFileInit_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class DataPageAccess_zip_args {
 public:

  DataPageAccess_zip_args(const DataPageAccess_zip_args&);
  DataPageAccess_zip_args& operator=(const DataPageAccess_zip_args&);
  DataPageAccess_zip_args() {
  }

  virtual ~DataPageAccess_zip_args() noexcept;

  bool operator == (const DataPageAccess_zip_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DataPageAccess_zip_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPageAccess_zip_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataPageAccess_zip_pargs {
 public:


  virtual ~DataPageAccess_zip_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class DataPageAccessClient : virtual public DataPageAccessIf {
 public:
  DataPageAccessClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  DataPageAccessClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  /**
   * A method definition looks like C code. It has a return type, arguments,
   * and optionally a list of exceptions that it may throw. Note that argument
   * lists and exception lists are specified using the exact same syntax as
   * field lists in struct or exception definitions.
   * 
   * @param _reln
   * @param _relpersistence
   * @param _forknum
   * @param _blknum
   * @param _readBufferMode
   * @param _lsn
   */
  void ReadBufferCommon(_Page& _return, const _Smgr_Relation& _reln, const int32_t _relpersistence, const int32_t _forknum, const int32_t _blknum, const int32_t _readBufferMode, const int64_t _lsn);
  void send_ReadBufferCommon(const _Smgr_Relation& _reln, const int32_t _relpersistence, const int32_t _forknum, const int32_t _blknum, const int32_t _readBufferMode, const int64_t _lsn);
  void recv_ReadBufferCommon(_Page& _return);
  void RpcMdRead(_Page& _return, const _Smgr_Relation& _reln, const int32_t _forknum, const int64_t _blknum, const int64_t _lsn);
  void send_RpcMdRead(const _Smgr_Relation& _reln, const int32_t _forknum, const int64_t _blknum, const int64_t _lsn);
  void recv_RpcMdRead(_Page& _return);
  int32_t RpcMdNblocks(const _Smgr_Relation& _reln, const int32_t _forknum, const int64_t _lsn);
  void send_RpcMdNblocks(const _Smgr_Relation& _reln, const int32_t _forknum, const int64_t _lsn);
  int32_t recv_RpcMdNblocks();
  int32_t RpcMdExists(const _Smgr_Relation& _reln, const int32_t _forknum, const int64_t _lsn);
  void send_RpcMdExists(const _Smgr_Relation& _reln, const int32_t _forknum, const int64_t _lsn);
  int32_t recv_RpcMdExists();
  void RpcMdCreate(const _Smgr_Relation& _reln, const int32_t _forknum, const int32_t _isRedo, const int64_t _lsn);
  void send_RpcMdCreate(const _Smgr_Relation& _reln, const int32_t _forknum, const int32_t _isRedo, const int64_t _lsn);
  void recv_RpcMdCreate();
  void RpcMdExtend(const _Smgr_Relation& _reln, const int32_t _forknum, const int32_t _blknum, const _Page& _buff, const int32_t skipFsync, const int64_t _lsn);
  void send_RpcMdExtend(const _Smgr_Relation& _reln, const int32_t _forknum, const int32_t _blknum, const _Page& _buff, const int32_t skipFsync, const int64_t _lsn);
  void recv_RpcMdExtend();
  void RpcTruncate(const _Smgr_Relation& _reln, const int32_t _forknum, const int32_t _blknum, const int64_t _lsn);
  void send_RpcTruncate(const _Smgr_Relation& _reln, const int32_t _forknum, const int32_t _blknum, const int64_t _lsn);
  void recv_RpcTruncate();
  void RpcFileClose(const _File _fd);
  void send_RpcFileClose(const _File _fd);
  void recv_RpcFileClose();
  void RpcTablespaceCreateDbspace(const _Oid _spcnode, const _Oid _dbnode, const bool isRedo);
  void send_RpcTablespaceCreateDbspace(const _Oid _spcnode, const _Oid _dbnode, const bool isRedo);
  void recv_RpcTablespaceCreateDbspace();
  _File RpcPathNameOpenFile(const _Path& _path, const _Flag _flag);
  void send_RpcPathNameOpenFile(const _Path& _path, const _Flag _flag);
  _File recv_RpcPathNameOpenFile();
  int32_t RpcFileWrite(const _File _fd, const _Page& _page, const int32_t _amount, const _Off_t _seekpos, const int32_t _wait_event_info);
  void send_RpcFileWrite(const _File _fd, const _Page& _page, const int32_t _amount, const _Off_t _seekpos, const int32_t _wait_event_info);
  int32_t recv_RpcFileWrite();
  void RpcFilePathName(_Path& _return, const _File _fd);
  void send_RpcFilePathName(const _File _fd);
  void recv_RpcFilePathName(_Path& _return);
  void RpcFileRead(_Page& _return, const _File _fd, const int32_t _amount, const _Off_t _seekpos, const int32_t _wait_event_info);
  void send_RpcFileRead(const _File _fd, const int32_t _amount, const _Off_t _seekpos, const int32_t _wait_event_info);
  void recv_RpcFileRead(_Page& _return);
  int32_t RpcFileTruncate(const _File _fd, const _Off_t _offset);
  void send_RpcFileTruncate(const _File _fd, const _Off_t _offset);
  int32_t recv_RpcFileTruncate();
  _Off_t RpcFileSize(const _File _fd);
  void send_RpcFileSize(const _File _fd);
  _Off_t recv_RpcFileSize();
  int32_t RpcFilePrefetch(const _File _fd, const _Off_t _offset, const int32_t _amount, const int32_t wait_event_info);
  void send_RpcFilePrefetch(const _File _fd, const _Off_t _offset, const int32_t _amount, const int32_t wait_event_info);
  int32_t recv_RpcFilePrefetch();
  void RpcFileWriteback(const _File _fd, const _Off_t _offset, const _Off_t nbytes, const int32_t wait_event_info);
  void send_RpcFileWriteback(const _File _fd, const _Off_t _offset, const _Off_t nbytes, const int32_t wait_event_info);
  void recv_RpcFileWriteback();
  int32_t RpcUnlink(const _Path& _path);
  void send_RpcUnlink(const _Path& _path);
  int32_t recv_RpcUnlink();
  int32_t RpcFtruncate(const _File _fd, const _Off_t _offset);
  void send_RpcFtruncate(const _File _fd, const _Off_t _offset);
  int32_t recv_RpcFtruncate();
  void RpcInitFile(_Page& _return, const _Path& _path);
  void send_RpcInitFile(const _Path& _path);
  void recv_RpcInitFile(_Page& _return);
  _File RpcOpenTransientFile(const _Path& _filename, const int32_t _fileflags);
  void send_RpcOpenTransientFile(const _Path& _filename, const int32_t _fileflags);
  _File recv_RpcOpenTransientFile();
  int32_t RpcCloseTransientFile(const _File _fd);
  void send_RpcCloseTransientFile(const _File _fd);
  int32_t recv_RpcCloseTransientFile();
  void Rpcread(_Page& _return, const _File _fd, const int32_t size);
  void send_Rpcread(const _File _fd, const int32_t size);
  void recv_Rpcread(_Page& _return);
  int32_t Rpcwrite(const _File _fd, const _Page& _page, const int32_t size);
  void send_Rpcwrite(const _File _fd, const _Page& _page, const int32_t size);
  int32_t recv_Rpcwrite();
  int32_t RpcFileSync(const _File _fd, const int32_t _wait_event_info);
  void send_RpcFileSync(const _File _fd, const int32_t _wait_event_info);
  int32_t recv_RpcFileSync();
  void RpcPgPRead(_Page& _return, const _File _fd, const int32_t _seg_bytes, const _Off_t _start_off);
  void send_RpcPgPRead(const _File _fd, const int32_t _seg_bytes, const _Off_t _start_off);
  void recv_RpcPgPRead(_Page& _return);
  int32_t RpcPgPWrite(const _File _fd, const _Page& _page, const int32_t _amount, const _Off_t _offset);
  void send_RpcPgPWrite(const _File _fd, const _Page& _page, const int32_t _amount, const _Off_t _offset);
  int32_t recv_RpcPgPWrite();
  int32_t RpcClose(const _File _fd);
  void send_RpcClose(const _File _fd);
  int32_t recv_RpcClose();
  int32_t RpcBasicOpenFile(const _Path& _path, const int32_t _flags);
  void send_RpcBasicOpenFile(const _Path& _path, const int32_t _flags);
  int32_t recv_RpcBasicOpenFile();
  int32_t RpcPgFdatasync(const _File _fd);
  void send_RpcPgFdatasync(const _File _fd);
  int32_t recv_RpcPgFdatasync();
  int32_t RpcPgFsyncNoWritethrough(const _File _fd);
  void send_RpcPgFsyncNoWritethrough(const _File _fd);
  int32_t recv_RpcPgFsyncNoWritethrough();
  int32_t RpcLseek(const int32_t _fd, const _Off_t _offset, const int32_t _flag);
  void send_RpcLseek(const int32_t _fd, const _Off_t _offset, const int32_t _flag);
  int32_t recv_RpcLseek();
  void RpcStat(_Stat_Resp& _return, const _Path& _path);
  void send_RpcStat(const _Path& _path);
  void recv_RpcStat(_Stat_Resp& _return);
  int32_t RpcDirectoryIsEmpty(const _Path& _path);
  void send_RpcDirectoryIsEmpty(const _Path& _path);
  int32_t recv_RpcDirectoryIsEmpty();
  int32_t RpcCopyDir(const _Path& _src, const _Path& _dst);
  void send_RpcCopyDir(const _Path& _src, const _Path& _dst);
  int32_t recv_RpcCopyDir();
  int32_t RpcPgFsync(const int32_t _fd);
  void send_RpcPgFsync(const int32_t _fd);
  int32_t recv_RpcPgFsync();
  int32_t RpcDurableUnlink(const _Path& _fname, const int32_t _flag);
  void send_RpcDurableUnlink(const _Path& _fname, const int32_t _flag);
  int32_t recv_RpcDurableUnlink();
  int32_t RpcDurableRenameExcl(const _Path& _oldFname, const _Path& _newFname, const int32_t _elevel);
  void send_RpcDurableRenameExcl(const _Path& _oldFname, const _Path& _newFname, const int32_t _elevel);
  int32_t recv_RpcDurableRenameExcl();
  int32_t RpcXLogWrite(const _File _fd, const _Page& _page, const int32_t _amount, const _Off_t _offset, const std::vector<int64_t> & _xlblocks, const int32_t _blknum, const int32_t _idx, const int64_t _lsn);
  void send_RpcXLogWrite(const _File _fd, const _Page& _page, const int32_t _amount, const _Off_t _offset, const std::vector<int64_t> & _xlblocks, const int32_t _blknum, const int32_t _idx, const int64_t _lsn);
  int32_t recv_RpcXLogWrite();
  void RpcXLogFileInit(_XLog_Init_File_Resp& _return, const int64_t _logsegno, const int32_t _use_existent, const int32_t _use_lock);
  void send_RpcXLogFileInit(const int64_t _logsegno, const int32_t _use_existent, const int32_t _use_lock);
  void recv_RpcXLogFileInit(_XLog_Init_File_Resp& _return);
  /**
   * This method has a oneway modifier. That means the client only makes
   * a request and does not listen for any response at all. Oneway methods
   * must be void.
   */
  void zip();
  void send_zip();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DataPageAccessProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<DataPageAccessIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (DataPageAccessProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ReadBufferCommon(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RpcMdRead(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RpcMdNblocks(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RpcMdExists(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RpcMdCreate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RpcMdExtend(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RpcTruncate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RpcFileClose(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RpcTablespaceCreateDbspace(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RpcPathNameOpenFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RpcFileWrite(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RpcFilePathName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RpcFileRead(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RpcFileTruncate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RpcFileSize(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RpcFilePrefetch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RpcFileWriteback(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RpcUnlink(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RpcFtruncate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RpcInitFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RpcOpenTransientFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RpcCloseTransientFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Rpcread(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Rpcwrite(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RpcFileSync(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RpcPgPRead(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RpcPgPWrite(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RpcClose(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RpcBasicOpenFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RpcPgFdatasync(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RpcPgFsyncNoWritethrough(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RpcLseek(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RpcStat(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RpcDirectoryIsEmpty(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RpcCopyDir(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RpcPgFsync(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RpcDurableUnlink(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RpcDurableRenameExcl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RpcXLogWrite(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RpcXLogFileInit(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_zip(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DataPageAccessProcessor(::std::shared_ptr<DataPageAccessIf> iface) :
    iface_(iface) {
    processMap_["ReadBufferCommon"] = &DataPageAccessProcessor::process_ReadBufferCommon;
    processMap_["RpcMdRead"] = &DataPageAccessProcessor::process_RpcMdRead;
    processMap_["RpcMdNblocks"] = &DataPageAccessProcessor::process_RpcMdNblocks;
    processMap_["RpcMdExists"] = &DataPageAccessProcessor::process_RpcMdExists;
    processMap_["RpcMdCreate"] = &DataPageAccessProcessor::process_RpcMdCreate;
    processMap_["RpcMdExtend"] = &DataPageAccessProcessor::process_RpcMdExtend;
    processMap_["RpcTruncate"] = &DataPageAccessProcessor::process_RpcTruncate;
    processMap_["RpcFileClose"] = &DataPageAccessProcessor::process_RpcFileClose;
    processMap_["RpcTablespaceCreateDbspace"] = &DataPageAccessProcessor::process_RpcTablespaceCreateDbspace;
    processMap_["RpcPathNameOpenFile"] = &DataPageAccessProcessor::process_RpcPathNameOpenFile;
    processMap_["RpcFileWrite"] = &DataPageAccessProcessor::process_RpcFileWrite;
    processMap_["RpcFilePathName"] = &DataPageAccessProcessor::process_RpcFilePathName;
    processMap_["RpcFileRead"] = &DataPageAccessProcessor::process_RpcFileRead;
    processMap_["RpcFileTruncate"] = &DataPageAccessProcessor::process_RpcFileTruncate;
    processMap_["RpcFileSize"] = &DataPageAccessProcessor::process_RpcFileSize;
    processMap_["RpcFilePrefetch"] = &DataPageAccessProcessor::process_RpcFilePrefetch;
    processMap_["RpcFileWriteback"] = &DataPageAccessProcessor::process_RpcFileWriteback;
    processMap_["RpcUnlink"] = &DataPageAccessProcessor::process_RpcUnlink;
    processMap_["RpcFtruncate"] = &DataPageAccessProcessor::process_RpcFtruncate;
    processMap_["RpcInitFile"] = &DataPageAccessProcessor::process_RpcInitFile;
    processMap_["RpcOpenTransientFile"] = &DataPageAccessProcessor::process_RpcOpenTransientFile;
    processMap_["RpcCloseTransientFile"] = &DataPageAccessProcessor::process_RpcCloseTransientFile;
    processMap_["Rpcread"] = &DataPageAccessProcessor::process_Rpcread;
    processMap_["Rpcwrite"] = &DataPageAccessProcessor::process_Rpcwrite;
    processMap_["RpcFileSync"] = &DataPageAccessProcessor::process_RpcFileSync;
    processMap_["RpcPgPRead"] = &DataPageAccessProcessor::process_RpcPgPRead;
    processMap_["RpcPgPWrite"] = &DataPageAccessProcessor::process_RpcPgPWrite;
    processMap_["RpcClose"] = &DataPageAccessProcessor::process_RpcClose;
    processMap_["RpcBasicOpenFile"] = &DataPageAccessProcessor::process_RpcBasicOpenFile;
    processMap_["RpcPgFdatasync"] = &DataPageAccessProcessor::process_RpcPgFdatasync;
    processMap_["RpcPgFsyncNoWritethrough"] = &DataPageAccessProcessor::process_RpcPgFsyncNoWritethrough;
    processMap_["RpcLseek"] = &DataPageAccessProcessor::process_RpcLseek;
    processMap_["RpcStat"] = &DataPageAccessProcessor::process_RpcStat;
    processMap_["RpcDirectoryIsEmpty"] = &DataPageAccessProcessor::process_RpcDirectoryIsEmpty;
    processMap_["RpcCopyDir"] = &DataPageAccessProcessor::process_RpcCopyDir;
    processMap_["RpcPgFsync"] = &DataPageAccessProcessor::process_RpcPgFsync;
    processMap_["RpcDurableUnlink"] = &DataPageAccessProcessor::process_RpcDurableUnlink;
    processMap_["RpcDurableRenameExcl"] = &DataPageAccessProcessor::process_RpcDurableRenameExcl;
    processMap_["RpcXLogWrite"] = &DataPageAccessProcessor::process_RpcXLogWrite;
    processMap_["RpcXLogFileInit"] = &DataPageAccessProcessor::process_RpcXLogFileInit;
    processMap_["zip"] = &DataPageAccessProcessor::process_zip;
  }

  virtual ~DataPageAccessProcessor() {}
};

class DataPageAccessProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DataPageAccessProcessorFactory(const ::std::shared_ptr< DataPageAccessIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< DataPageAccessIfFactory > handlerFactory_;
};

class DataPageAccessMultiface : virtual public DataPageAccessIf {
 public:
  DataPageAccessMultiface(std::vector<std::shared_ptr<DataPageAccessIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DataPageAccessMultiface() {}
 protected:
  std::vector<std::shared_ptr<DataPageAccessIf> > ifaces_;
  DataPageAccessMultiface() {}
  void add(::std::shared_ptr<DataPageAccessIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  /**
   * A method definition looks like C code. It has a return type, arguments,
   * and optionally a list of exceptions that it may throw. Note that argument
   * lists and exception lists are specified using the exact same syntax as
   * field lists in struct or exception definitions.
   * 
   * @param _reln
   * @param _relpersistence
   * @param _forknum
   * @param _blknum
   * @param _readBufferMode
   * @param _lsn
   */
  void ReadBufferCommon(_Page& _return, const _Smgr_Relation& _reln, const int32_t _relpersistence, const int32_t _forknum, const int32_t _blknum, const int32_t _readBufferMode, const int64_t _lsn) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ReadBufferCommon(_return, _reln, _relpersistence, _forknum, _blknum, _readBufferMode, _lsn);
    }
    ifaces_[i]->ReadBufferCommon(_return, _reln, _relpersistence, _forknum, _blknum, _readBufferMode, _lsn);
    return;
  }

  void RpcMdRead(_Page& _return, const _Smgr_Relation& _reln, const int32_t _forknum, const int64_t _blknum, const int64_t _lsn) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RpcMdRead(_return, _reln, _forknum, _blknum, _lsn);
    }
    ifaces_[i]->RpcMdRead(_return, _reln, _forknum, _blknum, _lsn);
    return;
  }

  int32_t RpcMdNblocks(const _Smgr_Relation& _reln, const int32_t _forknum, const int64_t _lsn) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RpcMdNblocks(_reln, _forknum, _lsn);
    }
    return ifaces_[i]->RpcMdNblocks(_reln, _forknum, _lsn);
  }

  int32_t RpcMdExists(const _Smgr_Relation& _reln, const int32_t _forknum, const int64_t _lsn) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RpcMdExists(_reln, _forknum, _lsn);
    }
    return ifaces_[i]->RpcMdExists(_reln, _forknum, _lsn);
  }

  void RpcMdCreate(const _Smgr_Relation& _reln, const int32_t _forknum, const int32_t _isRedo, const int64_t _lsn) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RpcMdCreate(_reln, _forknum, _isRedo, _lsn);
    }
    ifaces_[i]->RpcMdCreate(_reln, _forknum, _isRedo, _lsn);
  }

  void RpcMdExtend(const _Smgr_Relation& _reln, const int32_t _forknum, const int32_t _blknum, const _Page& _buff, const int32_t skipFsync, const int64_t _lsn) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RpcMdExtend(_reln, _forknum, _blknum, _buff, skipFsync, _lsn);
    }
    ifaces_[i]->RpcMdExtend(_reln, _forknum, _blknum, _buff, skipFsync, _lsn);
  }

  void RpcTruncate(const _Smgr_Relation& _reln, const int32_t _forknum, const int32_t _blknum, const int64_t _lsn) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RpcTruncate(_reln, _forknum, _blknum, _lsn);
    }
    ifaces_[i]->RpcTruncate(_reln, _forknum, _blknum, _lsn);
  }

  void RpcFileClose(const _File _fd) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RpcFileClose(_fd);
    }
    ifaces_[i]->RpcFileClose(_fd);
  }

  void RpcTablespaceCreateDbspace(const _Oid _spcnode, const _Oid _dbnode, const bool isRedo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RpcTablespaceCreateDbspace(_spcnode, _dbnode, isRedo);
    }
    ifaces_[i]->RpcTablespaceCreateDbspace(_spcnode, _dbnode, isRedo);
  }

  _File RpcPathNameOpenFile(const _Path& _path, const _Flag _flag) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RpcPathNameOpenFile(_path, _flag);
    }
    return ifaces_[i]->RpcPathNameOpenFile(_path, _flag);
  }

  int32_t RpcFileWrite(const _File _fd, const _Page& _page, const int32_t _amount, const _Off_t _seekpos, const int32_t _wait_event_info) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RpcFileWrite(_fd, _page, _amount, _seekpos, _wait_event_info);
    }
    return ifaces_[i]->RpcFileWrite(_fd, _page, _amount, _seekpos, _wait_event_info);
  }

  void RpcFilePathName(_Path& _return, const _File _fd) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RpcFilePathName(_return, _fd);
    }
    ifaces_[i]->RpcFilePathName(_return, _fd);
    return;
  }

  void RpcFileRead(_Page& _return, const _File _fd, const int32_t _amount, const _Off_t _seekpos, const int32_t _wait_event_info) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RpcFileRead(_return, _fd, _amount, _seekpos, _wait_event_info);
    }
    ifaces_[i]->RpcFileRead(_return, _fd, _amount, _seekpos, _wait_event_info);
    return;
  }

  int32_t RpcFileTruncate(const _File _fd, const _Off_t _offset) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RpcFileTruncate(_fd, _offset);
    }
    return ifaces_[i]->RpcFileTruncate(_fd, _offset);
  }

  _Off_t RpcFileSize(const _File _fd) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RpcFileSize(_fd);
    }
    return ifaces_[i]->RpcFileSize(_fd);
  }

  int32_t RpcFilePrefetch(const _File _fd, const _Off_t _offset, const int32_t _amount, const int32_t wait_event_info) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RpcFilePrefetch(_fd, _offset, _amount, wait_event_info);
    }
    return ifaces_[i]->RpcFilePrefetch(_fd, _offset, _amount, wait_event_info);
  }

  void RpcFileWriteback(const _File _fd, const _Off_t _offset, const _Off_t nbytes, const int32_t wait_event_info) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RpcFileWriteback(_fd, _offset, nbytes, wait_event_info);
    }
    ifaces_[i]->RpcFileWriteback(_fd, _offset, nbytes, wait_event_info);
  }

  int32_t RpcUnlink(const _Path& _path) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RpcUnlink(_path);
    }
    return ifaces_[i]->RpcUnlink(_path);
  }

  int32_t RpcFtruncate(const _File _fd, const _Off_t _offset) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RpcFtruncate(_fd, _offset);
    }
    return ifaces_[i]->RpcFtruncate(_fd, _offset);
  }

  void RpcInitFile(_Page& _return, const _Path& _path) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RpcInitFile(_return, _path);
    }
    ifaces_[i]->RpcInitFile(_return, _path);
    return;
  }

  _File RpcOpenTransientFile(const _Path& _filename, const int32_t _fileflags) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RpcOpenTransientFile(_filename, _fileflags);
    }
    return ifaces_[i]->RpcOpenTransientFile(_filename, _fileflags);
  }

  int32_t RpcCloseTransientFile(const _File _fd) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RpcCloseTransientFile(_fd);
    }
    return ifaces_[i]->RpcCloseTransientFile(_fd);
  }

  void Rpcread(_Page& _return, const _File _fd, const int32_t size) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Rpcread(_return, _fd, size);
    }
    ifaces_[i]->Rpcread(_return, _fd, size);
    return;
  }

  int32_t Rpcwrite(const _File _fd, const _Page& _page, const int32_t size) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Rpcwrite(_fd, _page, size);
    }
    return ifaces_[i]->Rpcwrite(_fd, _page, size);
  }

  int32_t RpcFileSync(const _File _fd, const int32_t _wait_event_info) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RpcFileSync(_fd, _wait_event_info);
    }
    return ifaces_[i]->RpcFileSync(_fd, _wait_event_info);
  }

  void RpcPgPRead(_Page& _return, const _File _fd, const int32_t _seg_bytes, const _Off_t _start_off) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RpcPgPRead(_return, _fd, _seg_bytes, _start_off);
    }
    ifaces_[i]->RpcPgPRead(_return, _fd, _seg_bytes, _start_off);
    return;
  }

  int32_t RpcPgPWrite(const _File _fd, const _Page& _page, const int32_t _amount, const _Off_t _offset) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RpcPgPWrite(_fd, _page, _amount, _offset);
    }
    return ifaces_[i]->RpcPgPWrite(_fd, _page, _amount, _offset);
  }

  int32_t RpcClose(const _File _fd) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RpcClose(_fd);
    }
    return ifaces_[i]->RpcClose(_fd);
  }

  int32_t RpcBasicOpenFile(const _Path& _path, const int32_t _flags) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RpcBasicOpenFile(_path, _flags);
    }
    return ifaces_[i]->RpcBasicOpenFile(_path, _flags);
  }

  int32_t RpcPgFdatasync(const _File _fd) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RpcPgFdatasync(_fd);
    }
    return ifaces_[i]->RpcPgFdatasync(_fd);
  }

  int32_t RpcPgFsyncNoWritethrough(const _File _fd) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RpcPgFsyncNoWritethrough(_fd);
    }
    return ifaces_[i]->RpcPgFsyncNoWritethrough(_fd);
  }

  int32_t RpcLseek(const int32_t _fd, const _Off_t _offset, const int32_t _flag) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RpcLseek(_fd, _offset, _flag);
    }
    return ifaces_[i]->RpcLseek(_fd, _offset, _flag);
  }

  void RpcStat(_Stat_Resp& _return, const _Path& _path) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RpcStat(_return, _path);
    }
    ifaces_[i]->RpcStat(_return, _path);
    return;
  }

  int32_t RpcDirectoryIsEmpty(const _Path& _path) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RpcDirectoryIsEmpty(_path);
    }
    return ifaces_[i]->RpcDirectoryIsEmpty(_path);
  }

  int32_t RpcCopyDir(const _Path& _src, const _Path& _dst) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RpcCopyDir(_src, _dst);
    }
    return ifaces_[i]->RpcCopyDir(_src, _dst);
  }

  int32_t RpcPgFsync(const int32_t _fd) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RpcPgFsync(_fd);
    }
    return ifaces_[i]->RpcPgFsync(_fd);
  }

  int32_t RpcDurableUnlink(const _Path& _fname, const int32_t _flag) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RpcDurableUnlink(_fname, _flag);
    }
    return ifaces_[i]->RpcDurableUnlink(_fname, _flag);
  }

  int32_t RpcDurableRenameExcl(const _Path& _oldFname, const _Path& _newFname, const int32_t _elevel) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RpcDurableRenameExcl(_oldFname, _newFname, _elevel);
    }
    return ifaces_[i]->RpcDurableRenameExcl(_oldFname, _newFname, _elevel);
  }

  int32_t RpcXLogWrite(const _File _fd, const _Page& _page, const int32_t _amount, const _Off_t _offset, const std::vector<int64_t> & _xlblocks, const int32_t _blknum, const int32_t _idx, const int64_t _lsn) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RpcXLogWrite(_fd, _page, _amount, _offset, _xlblocks, _blknum, _idx, _lsn);
    }
    return ifaces_[i]->RpcXLogWrite(_fd, _page, _amount, _offset, _xlblocks, _blknum, _idx, _lsn);
  }

  void RpcXLogFileInit(_XLog_Init_File_Resp& _return, const int64_t _logsegno, const int32_t _use_existent, const int32_t _use_lock) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RpcXLogFileInit(_return, _logsegno, _use_existent, _use_lock);
    }
    ifaces_[i]->RpcXLogFileInit(_return, _logsegno, _use_existent, _use_lock);
    return;
  }

  /**
   * This method has a oneway modifier. That means the client only makes
   * a request and does not listen for any response at all. Oneway methods
   * must be void.
   */
  void zip() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->zip();
    }
    ifaces_[i]->zip();
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class DataPageAccessConcurrentClient : virtual public DataPageAccessIf {
 public:
  DataPageAccessConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  DataPageAccessConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  /**
   * A method definition looks like C code. It has a return type, arguments,
   * and optionally a list of exceptions that it may throw. Note that argument
   * lists and exception lists are specified using the exact same syntax as
   * field lists in struct or exception definitions.
   * 
   * @param _reln
   * @param _relpersistence
   * @param _forknum
   * @param _blknum
   * @param _readBufferMode
   * @param _lsn
   */
  void ReadBufferCommon(_Page& _return, const _Smgr_Relation& _reln, const int32_t _relpersistence, const int32_t _forknum, const int32_t _blknum, const int32_t _readBufferMode, const int64_t _lsn);
  int32_t send_ReadBufferCommon(const _Smgr_Relation& _reln, const int32_t _relpersistence, const int32_t _forknum, const int32_t _blknum, const int32_t _readBufferMode, const int64_t _lsn);
  void recv_ReadBufferCommon(_Page& _return, const int32_t seqid);
  void RpcMdRead(_Page& _return, const _Smgr_Relation& _reln, const int32_t _forknum, const int64_t _blknum, const int64_t _lsn);
  int32_t send_RpcMdRead(const _Smgr_Relation& _reln, const int32_t _forknum, const int64_t _blknum, const int64_t _lsn);
  void recv_RpcMdRead(_Page& _return, const int32_t seqid);
  int32_t RpcMdNblocks(const _Smgr_Relation& _reln, const int32_t _forknum, const int64_t _lsn);
  int32_t send_RpcMdNblocks(const _Smgr_Relation& _reln, const int32_t _forknum, const int64_t _lsn);
  int32_t recv_RpcMdNblocks(const int32_t seqid);
  int32_t RpcMdExists(const _Smgr_Relation& _reln, const int32_t _forknum, const int64_t _lsn);
  int32_t send_RpcMdExists(const _Smgr_Relation& _reln, const int32_t _forknum, const int64_t _lsn);
  int32_t recv_RpcMdExists(const int32_t seqid);
  void RpcMdCreate(const _Smgr_Relation& _reln, const int32_t _forknum, const int32_t _isRedo, const int64_t _lsn);
  int32_t send_RpcMdCreate(const _Smgr_Relation& _reln, const int32_t _forknum, const int32_t _isRedo, const int64_t _lsn);
  void recv_RpcMdCreate(const int32_t seqid);
  void RpcMdExtend(const _Smgr_Relation& _reln, const int32_t _forknum, const int32_t _blknum, const _Page& _buff, const int32_t skipFsync, const int64_t _lsn);
  int32_t send_RpcMdExtend(const _Smgr_Relation& _reln, const int32_t _forknum, const int32_t _blknum, const _Page& _buff, const int32_t skipFsync, const int64_t _lsn);
  void recv_RpcMdExtend(const int32_t seqid);
  void RpcTruncate(const _Smgr_Relation& _reln, const int32_t _forknum, const int32_t _blknum, const int64_t _lsn);
  int32_t send_RpcTruncate(const _Smgr_Relation& _reln, const int32_t _forknum, const int32_t _blknum, const int64_t _lsn);
  void recv_RpcTruncate(const int32_t seqid);
  void RpcFileClose(const _File _fd);
  int32_t send_RpcFileClose(const _File _fd);
  void recv_RpcFileClose(const int32_t seqid);
  void RpcTablespaceCreateDbspace(const _Oid _spcnode, const _Oid _dbnode, const bool isRedo);
  int32_t send_RpcTablespaceCreateDbspace(const _Oid _spcnode, const _Oid _dbnode, const bool isRedo);
  void recv_RpcTablespaceCreateDbspace(const int32_t seqid);
  _File RpcPathNameOpenFile(const _Path& _path, const _Flag _flag);
  int32_t send_RpcPathNameOpenFile(const _Path& _path, const _Flag _flag);
  _File recv_RpcPathNameOpenFile(const int32_t seqid);
  int32_t RpcFileWrite(const _File _fd, const _Page& _page, const int32_t _amount, const _Off_t _seekpos, const int32_t _wait_event_info);
  int32_t send_RpcFileWrite(const _File _fd, const _Page& _page, const int32_t _amount, const _Off_t _seekpos, const int32_t _wait_event_info);
  int32_t recv_RpcFileWrite(const int32_t seqid);
  void RpcFilePathName(_Path& _return, const _File _fd);
  int32_t send_RpcFilePathName(const _File _fd);
  void recv_RpcFilePathName(_Path& _return, const int32_t seqid);
  void RpcFileRead(_Page& _return, const _File _fd, const int32_t _amount, const _Off_t _seekpos, const int32_t _wait_event_info);
  int32_t send_RpcFileRead(const _File _fd, const int32_t _amount, const _Off_t _seekpos, const int32_t _wait_event_info);
  void recv_RpcFileRead(_Page& _return, const int32_t seqid);
  int32_t RpcFileTruncate(const _File _fd, const _Off_t _offset);
  int32_t send_RpcFileTruncate(const _File _fd, const _Off_t _offset);
  int32_t recv_RpcFileTruncate(const int32_t seqid);
  _Off_t RpcFileSize(const _File _fd);
  int32_t send_RpcFileSize(const _File _fd);
  _Off_t recv_RpcFileSize(const int32_t seqid);
  int32_t RpcFilePrefetch(const _File _fd, const _Off_t _offset, const int32_t _amount, const int32_t wait_event_info);
  int32_t send_RpcFilePrefetch(const _File _fd, const _Off_t _offset, const int32_t _amount, const int32_t wait_event_info);
  int32_t recv_RpcFilePrefetch(const int32_t seqid);
  void RpcFileWriteback(const _File _fd, const _Off_t _offset, const _Off_t nbytes, const int32_t wait_event_info);
  int32_t send_RpcFileWriteback(const _File _fd, const _Off_t _offset, const _Off_t nbytes, const int32_t wait_event_info);
  void recv_RpcFileWriteback(const int32_t seqid);
  int32_t RpcUnlink(const _Path& _path);
  int32_t send_RpcUnlink(const _Path& _path);
  int32_t recv_RpcUnlink(const int32_t seqid);
  int32_t RpcFtruncate(const _File _fd, const _Off_t _offset);
  int32_t send_RpcFtruncate(const _File _fd, const _Off_t _offset);
  int32_t recv_RpcFtruncate(const int32_t seqid);
  void RpcInitFile(_Page& _return, const _Path& _path);
  int32_t send_RpcInitFile(const _Path& _path);
  void recv_RpcInitFile(_Page& _return, const int32_t seqid);
  _File RpcOpenTransientFile(const _Path& _filename, const int32_t _fileflags);
  int32_t send_RpcOpenTransientFile(const _Path& _filename, const int32_t _fileflags);
  _File recv_RpcOpenTransientFile(const int32_t seqid);
  int32_t RpcCloseTransientFile(const _File _fd);
  int32_t send_RpcCloseTransientFile(const _File _fd);
  int32_t recv_RpcCloseTransientFile(const int32_t seqid);
  void Rpcread(_Page& _return, const _File _fd, const int32_t size);
  int32_t send_Rpcread(const _File _fd, const int32_t size);
  void recv_Rpcread(_Page& _return, const int32_t seqid);
  int32_t Rpcwrite(const _File _fd, const _Page& _page, const int32_t size);
  int32_t send_Rpcwrite(const _File _fd, const _Page& _page, const int32_t size);
  int32_t recv_Rpcwrite(const int32_t seqid);
  int32_t RpcFileSync(const _File _fd, const int32_t _wait_event_info);
  int32_t send_RpcFileSync(const _File _fd, const int32_t _wait_event_info);
  int32_t recv_RpcFileSync(const int32_t seqid);
  void RpcPgPRead(_Page& _return, const _File _fd, const int32_t _seg_bytes, const _Off_t _start_off);
  int32_t send_RpcPgPRead(const _File _fd, const int32_t _seg_bytes, const _Off_t _start_off);
  void recv_RpcPgPRead(_Page& _return, const int32_t seqid);
  int32_t RpcPgPWrite(const _File _fd, const _Page& _page, const int32_t _amount, const _Off_t _offset);
  int32_t send_RpcPgPWrite(const _File _fd, const _Page& _page, const int32_t _amount, const _Off_t _offset);
  int32_t recv_RpcPgPWrite(const int32_t seqid);
  int32_t RpcClose(const _File _fd);
  int32_t send_RpcClose(const _File _fd);
  int32_t recv_RpcClose(const int32_t seqid);
  int32_t RpcBasicOpenFile(const _Path& _path, const int32_t _flags);
  int32_t send_RpcBasicOpenFile(const _Path& _path, const int32_t _flags);
  int32_t recv_RpcBasicOpenFile(const int32_t seqid);
  int32_t RpcPgFdatasync(const _File _fd);
  int32_t send_RpcPgFdatasync(const _File _fd);
  int32_t recv_RpcPgFdatasync(const int32_t seqid);
  int32_t RpcPgFsyncNoWritethrough(const _File _fd);
  int32_t send_RpcPgFsyncNoWritethrough(const _File _fd);
  int32_t recv_RpcPgFsyncNoWritethrough(const int32_t seqid);
  int32_t RpcLseek(const int32_t _fd, const _Off_t _offset, const int32_t _flag);
  int32_t send_RpcLseek(const int32_t _fd, const _Off_t _offset, const int32_t _flag);
  int32_t recv_RpcLseek(const int32_t seqid);
  void RpcStat(_Stat_Resp& _return, const _Path& _path);
  int32_t send_RpcStat(const _Path& _path);
  void recv_RpcStat(_Stat_Resp& _return, const int32_t seqid);
  int32_t RpcDirectoryIsEmpty(const _Path& _path);
  int32_t send_RpcDirectoryIsEmpty(const _Path& _path);
  int32_t recv_RpcDirectoryIsEmpty(const int32_t seqid);
  int32_t RpcCopyDir(const _Path& _src, const _Path& _dst);
  int32_t send_RpcCopyDir(const _Path& _src, const _Path& _dst);
  int32_t recv_RpcCopyDir(const int32_t seqid);
  int32_t RpcPgFsync(const int32_t _fd);
  int32_t send_RpcPgFsync(const int32_t _fd);
  int32_t recv_RpcPgFsync(const int32_t seqid);
  int32_t RpcDurableUnlink(const _Path& _fname, const int32_t _flag);
  int32_t send_RpcDurableUnlink(const _Path& _fname, const int32_t _flag);
  int32_t recv_RpcDurableUnlink(const int32_t seqid);
  int32_t RpcDurableRenameExcl(const _Path& _oldFname, const _Path& _newFname, const int32_t _elevel);
  int32_t send_RpcDurableRenameExcl(const _Path& _oldFname, const _Path& _newFname, const int32_t _elevel);
  int32_t recv_RpcDurableRenameExcl(const int32_t seqid);
  int32_t RpcXLogWrite(const _File _fd, const _Page& _page, const int32_t _amount, const _Off_t _offset, const std::vector<int64_t> & _xlblocks, const int32_t _blknum, const int32_t _idx, const int64_t _lsn);
  int32_t send_RpcXLogWrite(const _File _fd, const _Page& _page, const int32_t _amount, const _Off_t _offset, const std::vector<int64_t> & _xlblocks, const int32_t _blknum, const int32_t _idx, const int64_t _lsn);
  int32_t recv_RpcXLogWrite(const int32_t seqid);
  void RpcXLogFileInit(_XLog_Init_File_Resp& _return, const int64_t _logsegno, const int32_t _use_existent, const int32_t _use_lock);
  int32_t send_RpcXLogFileInit(const int64_t _logsegno, const int32_t _use_existent, const int32_t _use_lock);
  void recv_RpcXLogFileInit(_XLog_Init_File_Resp& _return, const int32_t seqid);
  /**
   * This method has a oneway modifier. That means the client only makes
   * a request and does not listen for any response at all. Oneway methods
   * must be void.
   */
  void zip();
  void send_zip();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
