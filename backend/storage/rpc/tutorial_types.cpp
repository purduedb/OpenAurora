/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "tutorial_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace tutorial {


_Stat_Resp::~_Stat_Resp() noexcept {
}


void _Stat_Resp::__set__result(const int32_t val) {
  this->_result = val;
}

void _Stat_Resp::__set__stat_mode(const int32_t val) {
  this->_stat_mode = val;
}
std::ostream& operator<<(std::ostream& out, const _Stat_Resp& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t _Stat_Resp::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_result);
          this->__isset._result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_stat_mode);
          this->__isset._stat_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t _Stat_Resp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("_Stat_Resp");

  xfer += oprot->writeFieldBegin("_result", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->_result);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_stat_mode", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->_stat_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(_Stat_Resp &a, _Stat_Resp &b) {
  using ::std::swap;
  swap(a._result, b._result);
  swap(a._stat_mode, b._stat_mode);
  swap(a.__isset, b.__isset);
}

_Stat_Resp::_Stat_Resp(const _Stat_Resp& other0) {
  _result = other0._result;
  _stat_mode = other0._stat_mode;
  __isset = other0.__isset;
}
_Stat_Resp& _Stat_Resp::operator=(const _Stat_Resp& other1) {
  _result = other1._result;
  _stat_mode = other1._stat_mode;
  __isset = other1.__isset;
  return *this;
}
void _Stat_Resp::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "_Stat_Resp(";
  out << "_result=" << to_string(_result);
  out << ", " << "_stat_mode=" << to_string(_stat_mode);
  out << ")";
}


_XLog_Init_File_Resp::~_XLog_Init_File_Resp() noexcept {
}


void _XLog_Init_File_Resp::__set__fd(const int32_t val) {
  this->_fd = val;
}

void _XLog_Init_File_Resp::__set__use_existent(const int32_t val) {
  this->_use_existent = val;
}
std::ostream& operator<<(std::ostream& out, const _XLog_Init_File_Resp& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t _XLog_Init_File_Resp::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_fd);
          this->__isset._fd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_use_existent);
          this->__isset._use_existent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t _XLog_Init_File_Resp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("_XLog_Init_File_Resp");

  xfer += oprot->writeFieldBegin("_fd", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->_fd);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_use_existent", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->_use_existent);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(_XLog_Init_File_Resp &a, _XLog_Init_File_Resp &b) {
  using ::std::swap;
  swap(a._fd, b._fd);
  swap(a._use_existent, b._use_existent);
  swap(a.__isset, b.__isset);
}

_XLog_Init_File_Resp::_XLog_Init_File_Resp(const _XLog_Init_File_Resp& other2) {
  _fd = other2._fd;
  _use_existent = other2._use_existent;
  __isset = other2.__isset;
}
_XLog_Init_File_Resp& _XLog_Init_File_Resp::operator=(const _XLog_Init_File_Resp& other3) {
  _fd = other3._fd;
  _use_existent = other3._use_existent;
  __isset = other3.__isset;
  return *this;
}
void _XLog_Init_File_Resp::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "_XLog_Init_File_Resp(";
  out << "_fd=" << to_string(_fd);
  out << ", " << "_use_existent=" << to_string(_use_existent);
  out << ")";
}


_Smgr_Relation::~_Smgr_Relation() noexcept {
}


void _Smgr_Relation::__set__spc_node(const _Oid val) {
  this->_spc_node = val;
}

void _Smgr_Relation::__set__db_node(const _Oid val) {
  this->_db_node = val;
}

void _Smgr_Relation::__set__rel_node(const _Oid val) {
  this->_rel_node = val;
}

void _Smgr_Relation::__set__backend_id(const int32_t val) {
  this->_backend_id = val;
}
std::ostream& operator<<(std::ostream& out, const _Smgr_Relation& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t _Smgr_Relation::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_spc_node);
          this->__isset._spc_node = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_db_node);
          this->__isset._db_node = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_rel_node);
          this->__isset._rel_node = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_backend_id);
          this->__isset._backend_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t _Smgr_Relation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("_Smgr_Relation");

  xfer += oprot->writeFieldBegin("_spc_node", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->_spc_node);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_db_node", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->_db_node);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_rel_node", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->_rel_node);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_backend_id", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->_backend_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(_Smgr_Relation &a, _Smgr_Relation &b) {
  using ::std::swap;
  swap(a._spc_node, b._spc_node);
  swap(a._db_node, b._db_node);
  swap(a._rel_node, b._rel_node);
  swap(a._backend_id, b._backend_id);
  swap(a.__isset, b.__isset);
}

_Smgr_Relation::_Smgr_Relation(const _Smgr_Relation& other4) {
  _spc_node = other4._spc_node;
  _db_node = other4._db_node;
  _rel_node = other4._rel_node;
  _backend_id = other4._backend_id;
  __isset = other4.__isset;
}
_Smgr_Relation& _Smgr_Relation::operator=(const _Smgr_Relation& other5) {
  _spc_node = other5._spc_node;
  _db_node = other5._db_node;
  _rel_node = other5._rel_node;
  _backend_id = other5._backend_id;
  __isset = other5.__isset;
  return *this;
}
void _Smgr_Relation::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "_Smgr_Relation(";
  out << "_spc_node=" << to_string(_spc_node);
  out << ", " << "_db_node=" << to_string(_db_node);
  out << ", " << "_rel_node=" << to_string(_rel_node);
  out << ", " << "_backend_id=" << to_string(_backend_id);
  out << ")";
}

} // namespace
