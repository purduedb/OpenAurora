/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "tutorial_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace tutorial {


_Stat_Resp::~_Stat_Resp() noexcept {
}


void _Stat_Resp::__set__result(const int32_t val) {
  this->_result = val;
}

void _Stat_Resp::__set__stat_mode(const int32_t val) {
  this->_stat_mode = val;
}
std::ostream& operator<<(std::ostream& out, const _Stat_Resp& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t _Stat_Resp::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_result);
          this->__isset._result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_stat_mode);
          this->__isset._stat_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t _Stat_Resp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("_Stat_Resp");

  xfer += oprot->writeFieldBegin("_result", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->_result);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_stat_mode", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->_stat_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(_Stat_Resp &a, _Stat_Resp &b) {
  using ::std::swap;
  swap(a._result, b._result);
  swap(a._stat_mode, b._stat_mode);
  swap(a.__isset, b.__isset);
}

_Stat_Resp::_Stat_Resp(const _Stat_Resp& other0) {
  _result = other0._result;
  _stat_mode = other0._stat_mode;
  __isset = other0.__isset;
}
_Stat_Resp& _Stat_Resp::operator=(const _Stat_Resp& other1) {
  _result = other1._result;
  _stat_mode = other1._stat_mode;
  __isset = other1.__isset;
  return *this;
}
void _Stat_Resp::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "_Stat_Resp(";
  out << "_result=" << to_string(_result);
  out << ", " << "_stat_mode=" << to_string(_stat_mode);
  out << ")";
}

} // namespace
