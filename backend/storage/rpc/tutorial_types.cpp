/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "tutorial_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace tutorial {

int _k_ForkNumberValues[] = {
  _ForkNumber::InvalidForkNumber,
  _ForkNumber::MAIN_FORKNUM,
  _ForkNumber::FSM_FORKNUM,
  _ForkNumber::VISIBILITYMAP_FORKNUM,
  _ForkNumber::INIT_FORKNUM
};
const char* _k_ForkNumberNames[] = {
  "InvalidForkNumber",
  "MAIN_FORKNUM",
  "FSM_FORKNUM",
  "VISIBILITYMAP_FORKNUM",
  "INIT_FORKNUM"
};
const std::map<int, const char*> __ForkNumber_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _k_ForkNumberValues, _k_ForkNumberNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const _ForkNumber::type& val) {
  std::map<int, const char*>::const_iterator it = __ForkNumber_VALUES_TO_NAMES.find(val);
  if (it != __ForkNumber_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const _ForkNumber::type& val) {
  std::map<int, const char*>::const_iterator it = __ForkNumber_VALUES_TO_NAMES.find(val);
  if (it != __ForkNumber_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}


_RelFileNode::~_RelFileNode() noexcept {
}


void _RelFileNode::__set_spcNode(const _Oid val) {
  this->spcNode = val;
}

void _RelFileNode::__set_dbNode(const _Oid val) {
  this->dbNode = val;
}

void _RelFileNode::__set_relNode(const _Oid val) {
  this->relNode = val;
}
std::ostream& operator<<(std::ostream& out, const _RelFileNode& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t _RelFileNode::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->spcNode);
          this->__isset.spcNode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->dbNode);
          this->__isset.dbNode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->relNode);
          this->__isset.relNode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t _RelFileNode::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("_RelFileNode");

  xfer += oprot->writeFieldBegin("spcNode", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->spcNode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dbNode", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->dbNode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("relNode", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->relNode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(_RelFileNode &a, _RelFileNode &b) {
  using ::std::swap;
  swap(a.spcNode, b.spcNode);
  swap(a.dbNode, b.dbNode);
  swap(a.relNode, b.relNode);
  swap(a.__isset, b.__isset);
}

_RelFileNode::_RelFileNode(const _RelFileNode& other0) {
  spcNode = other0.spcNode;
  dbNode = other0.dbNode;
  relNode = other0.relNode;
  __isset = other0.__isset;
}
_RelFileNode& _RelFileNode::operator=(const _RelFileNode& other1) {
  spcNode = other1.spcNode;
  dbNode = other1.dbNode;
  relNode = other1.relNode;
  __isset = other1.__isset;
  return *this;
}
void _RelFileNode::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "_RelFileNode(";
  out << "spcNode=" << to_string(spcNode);
  out << ", " << "dbNode=" << to_string(dbNode);
  out << ", " << "relNode=" << to_string(relNode);
  out << ")";
}


_Page::~_Page() noexcept {
}


void _Page::__set_node(const _RelFileNode& val) {
  this->node = val;
}

void _Page::__set_forknumber(const _ForkNumber::type val) {
  this->forknumber = val;
}

void _Page::__set_blocknum(const _BlockNumber val) {
  this->blocknum = val;
}

void _Page::__set_content(const std::string& val) {
  this->content = val;
}
std::ostream& operator<<(std::ostream& out, const _Page& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t _Page::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->node.read(iprot);
          this->__isset.node = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2;
          xfer += iprot->readI32(ecast2);
          this->forknumber = (_ForkNumber::type)ecast2;
          this->__isset.forknumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->blocknum);
          this->__isset.blocknum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->content);
          this->__isset.content = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t _Page::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("_Page");

  xfer += oprot->writeFieldBegin("node", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->node.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("forknumber", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->forknumber);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("blocknum", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->blocknum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("content", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeBinary(this->content);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(_Page &a, _Page &b) {
  using ::std::swap;
  swap(a.node, b.node);
  swap(a.forknumber, b.forknumber);
  swap(a.blocknum, b.blocknum);
  swap(a.content, b.content);
  swap(a.__isset, b.__isset);
}

_Page::_Page(const _Page& other3) {
  node = other3.node;
  forknumber = other3.forknumber;
  blocknum = other3.blocknum;
  content = other3.content;
  __isset = other3.__isset;
}
_Page& _Page::operator=(const _Page& other4) {
  node = other4.node;
  forknumber = other4.forknumber;
  blocknum = other4.blocknum;
  content = other4.content;
  __isset = other4.__isset;
  return *this;
}
void _Page::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "_Page(";
  out << "node=" << to_string(node);
  out << ", " << "forknumber=" << to_string(forknumber);
  out << ", " << "blocknum=" << to_string(blocknum);
  out << ", " << "content=" << to_string(content);
  out << ")";
}

} // namespace
