// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "c.h"
//#include "postgres.h"
//
//
//#include "DataPageAccess.h"
//#include <thrift/protocol/TBinaryProtocol.h>
//#include <thrift/server/TSimpleServer.h>
//#include <thrift/transport/TServerSocket.h>
//#include <thrift/transport/TBufferTransports.h>
//#include <thrift/server/TThreadedServer.h>
//#include "storage/fd.h"
//#include "commands/tablespace.h"
//#include "pgstat.h"
//#include "storage/rpcserver.h"
//
//using namespace ::apache::thrift;
//using namespace ::apache::thrift::protocol;
//using namespace ::apache::thrift::transport;
//using namespace ::apache::thrift::server;
//
//using namespace  ::tutorial;
//
//class DataPageAccessHandler : virtual public DataPageAccessIf {
//public:
//    DataPageAccessHandler() {
//        // Your initialization goes here
//    }
//
//    /**
//     * A method definition looks like C code. It has a return type, arguments,
//     * and optionally a list of exceptions that it may throw. Note that argument
//     * lists and exception lists are specified using the exact same syntax as
//     * field lists in struct or exception definitions.
//     *
//     * @param _fd
//     */
//    void RpcFileClose(const _File _fd) {
//        // Your implementation goes here
//        printf("RpcFileClose\n");
//        FileClose(_fd);
//    }
//
//    void RpcTablespaceCreateDbspace(const _Oid _spcnode, const _Oid _dbnode, const bool isRedo) {
//        // Your implementation goes here
//        printf("RpcTablespaceCreateDbspace\n");
//        TablespaceCreateDbspace(_spcnode, _dbnode, isRedo);
//    }
//
//    _File RpcPathNameOpenFile(const _Path& _path, const _Flag _flag) {
//        // Your implementation goes here
//        printf("RpcPathNameOpenFile\n");
//        return PathNameOpenFile(_path.c_str(), _flag);
//    }
//
//    // todo
//    int32_t RpcFileWrite(const _File _fd, const _Page& _page, const _Off_t _seekpos) {
//        // Your implementation goes here
//        printf("RpcFileWrite\n");
//        char buff[BLCKSZ+8];
//        _page.copy(buff, BLCKSZ);
//        return FileWrite(_fd, buff, BLCKSZ, _seekpos, WAIT_EVENT_DATA_FILE_WRITE);
//    }
//
//    void RpcFilePathName(_Path& _return, const _File _fd) {
//        // Your implementation goes here
//        printf("RpcFilePathName\n");
//        char * filename = FilePathName(_fd);
//        _return.assign(filename);
//        return;
//    }
//
//    // todo
//    void RpcFileRead(_Page& _return, const _File _fd, const _Off_t _seekpos) {
//        // Your implementation goes here
//        printf("RpcFileRead\n");
//        char buff[BLCKSZ+8];
//        FileRead(_fd, buff, BLCKSZ, _seekpos, WAIT_EVENT_DATA_FILE_READ);
//        _return.assign(buff, BLCKSZ);
//        return;
//    }
//
//    // todo
//    int32_t RpcFileTruncate(const _File _fd, const _Off_t _offset) {
//        // Your implementation goes here
//        printf("RpcFileTruncate\n");
//        return FileTruncate(_fd, _offset, WAIT_EVENT_DATA_FILE_TRUNCATE);
//    }
//
//    _Off_t RpcFileSize(const _File _fd) {
//        // Your implementation goes here
//        printf("RpcFileSize\n");
//        return FileSize(_fd);
//    }
//
//    int32_t RpcFilePrefetch(const _File _fd, const _Off_t _offset, const int32_t _amount, const int32_t wait_event_info) {
//        // Your implementation goes here
//        printf("RpcFilePrefetch\n");
//        return FilePrefetch(_fd, _offset, _amount, wait_event_info);
//    }
//
//    void RpcFileWriteback(const _File _fd, const _Off_t _offset, const _Off_t nbytes, const int32_t wait_event_info) {
//        // Your implementation goes here
//        printf("RpcFileWriteback\n");
//        FileWriteback(_fd, _offset, nbytes, wait_event_info);
//        return;
//    }
//
//    int32_t RpcUnlink(const _Path& _path) {
//        // Your implementation goes here
//        printf("RpcUnlink\n");
//        return unlink(_path.c_str());
//    }
//
//    int32_t RpcFtruncate(const _File _fd, const _Off_t _offset) {
//        // Your implementation goes here
//        printf("RpcFtruncate\n");
//        return ftruncate(_fd, _offset);
//    }
//
//    void RpcInitFile(_Page& _return, const _Path& _path) {
//        // Your implementation goes here
//        printf("RpcInitFile\n");
//    }
//
//    _File RpcOpenTransientFile(const _Path& _filename, const int32_t _fileflags) {
//        // Your implementation goes here
//        printf("RpcOpenTransientFile\n");
//        return OpenTransientFile(_filename.c_str(), _fileflags);
//    }
//
//    void RpcCloseTransientFile(const _File _fd) {
//        // Your implementation goes here
//        printf("RpcCloseTransientFile\n");
//        CloseTransientFile(_fd);
//    }
//
//    void Rpcread(_Page& _return, const _File _fd, const int32_t size) {
//        // Your implementation goes here
//        printf("Rpcread\n");
//    }
//
//    int32_t Rpcwrite(const _File _fd, const _Page& _page, const int32_t size) {
//        // Your implementation goes here
//        printf("Rpcwrite\n");
//    }
//
//    /**
//     * This method has a oneway modifier. That means the client only makes
//     * a request and does not listen for any response at all. Oneway methods
//     * must be void.
//     */
//    void zip() {
//        // Your implementation goes here
//        printf("zip\n");
//    }
//
//};
//
//
//void
//RpcServerLoop(void){
//    int port = 9090;
//
//
//    TThreadedServer server(
//            std::make_shared<DataPageAccessProcessor>(std::make_shared<DataPageAccessHandler>()),
//            std::make_shared<TServerSocket>(port), //port
//            std::make_shared<TBufferedTransportFactory>(),
//            std::make_shared<TBinaryProtocolFactory>());
//
//    server.serve();
//}

int main() {
    return 0;
}